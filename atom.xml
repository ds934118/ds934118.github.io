<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BC 的日常筆記</title>
  
  <subtitle>What I cannot create, I do not understand.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bclin.tw/"/>
  <updated>2021-07-12T08:50:24.737Z</updated>
  <id>https://bclin.tw/</id>
  
  <author>
    <name>BC Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【LeetCode】1. Two Sum 解題報告</title>
    <link href="https://bclin.tw/2021/07/12/leetcode-1/"/>
    <id>https://bclin.tw/2021/07/12/leetcode-1/</id>
    <published>2021-07-12T16:50:00.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="3-1-Two-Sum-Easy"   >          <a href="#3-1-Two-Sum-Easy" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-Two-Sum-Easy" class="headerlink" title="3. 1. Two Sum / Easy"></a>3. 1. Two Sum / Easy</h1>      <p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><a id="more"></a>        <h2 id="Example-1"   >          <a href="#Example-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2>      <p>Input: nums = [2,7,11,15], target = 9</p><blockquote><p>Output: [0,1]<br>Output: Because nums[0] + nums[1] == 9, we return [0, 1].</p></blockquote>        <h2 id="Example-2"   >          <a href="#Example-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2>      <blockquote><p>Input: nums = [3,2,4], target = 6<br>Output: [1,2]</p></blockquote>        <h2 id="Example-3"   >          <a href="#Example-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h2>      <blockquote><p>Input: nums = [3,3], target = 6<br>Output: [0,1]</p></blockquote>        <h2 id="Constraints"   >          <a href="#Constraints" class="heading-link"><i class="fas fa-link"></i></a><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h2>      <blockquote><ul><li>2 &lt;= nums.length &lt;= 104</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>-109 &lt;= target &lt;= 109</li><li>Only one valid answer exists.</li></ul></blockquote>        <h1 id="Solution-1-Brute-Force"   >          <a href="#Solution-1-Brute-Force" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-1-Brute-Force" class="headerlink" title="Solution 1: Brute Force"></a>Solution 1: Brute Force</h1>              <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <p>暴力解應該很直覺，雙迴圈，第一個數字用 target 剪去目前的數字，再迴圈去找第二個數字。優點是簡單，缺點是很慢。</p>        <h2 id="效能"   >          <a href="#效能" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity"   >          <a href="#Complexity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N^2)</li><li>Space Complexity: O(1)</li></ul>        <h3 id="LeetCode-Result"   >          <a href="#LeetCode-Result" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 276ms</li><li>Memory Usage: 10.2 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/521189952/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/521189952/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Solution-2-Hash-Map"   >          <a href="#Solution-2-Hash-Map" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-2-Hash-Map" class="headerlink" title="Solution 2: Hash Map"></a>Solution 2: Hash Map</h1>              <h2 id="思路-1"   >          <a href="#思路-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2>      <p>暴力解當中，要找到另一個補數需要迴圈找，太耗時間，那就用 Hash Map 把這些數字的位置存起來。Hash Map 尋找的時間是 O(1)，於是我們就可以把整個搜尋時間變成 O(N)了。</p><p>迴圈開始跑，數字進來，先找找 Map 中有沒有補數，有的話，我們就找到答案了；沒有的話，把目前的數字存進 Map，以供之後尋找。</p><p>由於題目宣稱一定會有一組解，所以可以放心地在找到解之後，馬上把解送出去。</p>        <h2 id="效能-1"   >          <a href="#效能-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能-1" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity-1"   >          <a href="#Complexity-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity-1" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N)</li><li>Space Complexity: O(N)</li></ul>        <h3 id="LeetCode-Result-1"   >          <a href="#LeetCode-Result-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result-1" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 8ms</li><li>Memory Usage: 10.7 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/521190869/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/521190869/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code-1"   >          <a href="#Code-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(m.find(c) != m.end()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;m[target-nums[i]], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m.emplace(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-1-Two-Sum-Easy&quot;   &gt;
          &lt;a href=&quot;#3-1-Two-Sum-Easy&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#3-1-Two-Sum-Easy&quot; class=&quot;headerlink&quot; title=&quot;3. 1. Two Sum / Easy&quot;&gt;&lt;/a&gt;3. 1. Two Sum / Easy&lt;/h1&gt;
      &lt;p&gt;Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;
&lt;p&gt;You can return the answer in any order.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】3. Longest Substring Without Repeating Characters 解題報告</title>
    <link href="https://bclin.tw/2021/07/07/leetcode-3/"/>
    <id>https://bclin.tw/2021/07/07/leetcode-3/</id>
    <published>2021-07-07T21:55:56.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="3-Longest-Substring-Without-Repeating-Characters-Medium"   >          <a href="#3-Longest-Substring-Without-Repeating-Characters-Medium" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-Longest-Substring-Without-Repeating-Characters-Medium" class="headerlink" title="3. Longest Substring Without Repeating Characters / Medium"></a>3. Longest Substring Without Repeating Characters / Medium</h1>      <p>Given a string s, find the length of the longest substring without repeating characters.</p><a id="more"></a>        <h2 id="Example-1"   >          <a href="#Example-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2>      <blockquote><p>Input: s = “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.</p></blockquote>        <h2 id="Example-2"   >          <a href="#Example-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2>      <blockquote><p>Input: s = “bbbbb”<br>Output: 1<br>Explanation: The answer is “b”, with the length of 1.</p></blockquote>        <h2 id="Example-3"   >          <a href="#Example-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h2>      <blockquote><p>Input: s = “pwwkew”<br>Output: 3<br>Explanation: The answer is “wke”, with the length of 3.<br>Notice that the answer must be a substring, “pwke” is a subsequence and not a substring.</p></blockquote>        <h2 id="Example-4"   >          <a href="#Example-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-4" class="headerlink" title="Example 4:"></a>Example 4:</h2>      <blockquote><p>Input: s = “”<br>Output: 0</p></blockquote>        <h1 id="Solution-1-Sliding-Window-Brute-Force"   >          <a href="#Solution-1-Sliding-Window-Brute-Force" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-1-Sliding-Window-Brute-Force" class="headerlink" title="Solution 1: Sliding Window / Brute Force"></a>Solution 1: Sliding Window / Brute Force</h1>              <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <p>最長不重複子字串，字串內包含所有字元。因此我們知道，不重複子字串最長 128 字元。</p><p>i, j 兩個指標代表目前的子字串頭尾，j 往前掃，每次都將新進的字元位置存進 chars 陣列中，如果之前已經有過這個字元，就會有兩種狀況：</p><ol><li>這個字元目前還在子字串中（chars[s[j]] &gt;= i）</li><li>字元已經離開子字串（chars[s[j]] &lt; i）<br>我們取最大的那一個變成目前子字串的開頭，即 i 不動或往右移動，接著計算子字串長度，大於目前的 maxLen 就更新 maxLen 的值，然後將 s[j] 字元的位置更新成 j+1。</li></ol>        <h2 id="效能"   >          <a href="#效能" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity"   >          <a href="#Complexity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N)</li><li>Space Complexity: O(N)</li></ul>        <h3 id="LeetCode-Result"   >          <a href="#LeetCode-Result" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 4ms</li><li>Memory Usage: 6.9 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/518287814/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/518287814/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> chars[<span class="number">129</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j - i &gt;= <span class="number">128</span>) <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">            <span class="keyword">if</span>(chars[s[j]] != <span class="number">0</span>) i = max(i, chars[s[j]]);</span><br><span class="line">            maxLen = max(maxLen, j-i+<span class="number">1</span>);</span><br><span class="line">            chars[s[j]] = j+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-Longest-Substring-Without-Repeating-Characters-Medium&quot;   &gt;
          &lt;a href=&quot;#3-Longest-Substring-Without-Repeating-Characters-Medium&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#3-Longest-Substring-Without-Repeating-Characters-Medium&quot; class=&quot;headerlink&quot; title=&quot;3. Longest Substring Without Repeating Characters / Medium&quot;&gt;&lt;/a&gt;3. Longest Substring Without Repeating Characters / Medium&lt;/h1&gt;
      &lt;p&gt;Given a string s, find the length of the longest substring without repeating characters.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】139. Word Break 解題報告</title>
    <link href="https://bclin.tw/2021/06/21/leetcode-139/"/>
    <id>https://bclin.tw/2021/06/21/leetcode-139/</id>
    <published>2021-06-21T17:55:56.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="139-Word-Break-Medium"   >          <a href="#139-Word-Break-Medium" class="heading-link"><i class="fas fa-link"></i></a><a href="#139-Word-Break-Medium" class="headerlink" title="139. Word Break / Medium"></a>139. Word Break / Medium</h1>      <p>Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.</p><p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p><a id="more"></a>         <h2 id="Example-1"   >          <a href="#Example-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2>      <blockquote><p>Input: s = “leetcode”, wordDict = [“leet”,”code”]<br>Output: true<br>Explanation: Return true because “leetcode” can be segmented as “leet code”.</p></blockquote>        <h2 id="Example-2"   >          <a href="#Example-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2>      <blockquote><p>Input: s = “applepenapple”, wordDict = [“apple”,”pen”]<br>Output: true<br>Explanation: Return true because “applepenapple” can be segmented as “apple pen apple”.<br>Note that you are allowed to reuse a dictionary word.</p></blockquote>        <h2 id="Example-3"   >          <a href="#Example-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h2>      <blockquote><p>Input: s = “catsandog”, wordDict = [“cats”,”dog”,”sand”,”and”,”cat”]<br>Output: false</p></blockquote>        <h2 id="Constraints"   >          <a href="#Constraints" class="heading-link"><i class="fas fa-link"></i></a><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h2>      <blockquote><ul><li>1 &lt;= s.length &lt;= 300</li><li>1 &lt;= wordDict.length &lt;= 1000</li><li>1 &lt;= wordDict[i].length &lt;= 20</li><li>s and wordDict[i] consist of only lowercase English letters.</li><li>All the strings of wordDict are unique.</li></ul></blockquote>        <h1 id="Solution-DP-with-HashMap"   >          <a href="#Solution-DP-with-HashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-DP-with-HashMap" class="headerlink" title="Solution: DP with HashMap"></a>Solution: DP with HashMap</h1>              <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <p>這題解法很多，網路上也有 Set 解、暴力解和其他解法[1][2]，我則是用個人認為比較優雅的解法：DP + HashMap。</p><p>建立 HashMap，Key 是開頭字母，Value 則是一個 string vector，裡面存所有此字元開頭的字串。</p><p>開一個 bool vector 用來作為 dp 的紀錄，dp[i] 代表用 wordDict 內的 string 去比對，是否能到第 i 個字元。</p><p>迴圈遍歷整個字串，以 example 1 為例，最一開始的字元是 ‘l’，在 HashMap 中會拿出 ‘leet’，這時我們用 substr 去切，從目前的 i (0) 開始切 ‘leet’ 的長度 (4)，然後將這個從 s 切出來的字串 (leet) 與 HashMap 抓出來的字串 (leet) 比對，假使兩字串相同 並且 dp[i] 為真，表示 wordDict 中的字串可以組合出一個字串和 s.substr(0, 4) 相同，dp[4] 因此為真。</p><p>最後只要看 dp vector 的最後一項是不是為真，就知道 wordDict 中的字串是否可以組合出字串完整的 s。</p>        <h2 id="效能"   >          <a href="#效能" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity"   >          <a href="#Complexity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(MN)</li><li>Space Complexity: O(N)</li></ul>        <h3 id="LeetCode-Result"   >          <a href="#LeetCode-Result" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 0ms</li><li>Memory Usage: 7.7 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/511033584/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/511033584/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> size = s.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; dict;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; word: wordDict) &#123;</span><br><span class="line">            dict[word[<span class="number">0</span>]].emplace_back(word);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; dp(size + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; element: dict[s[i]]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> e_size = element.size();</span><br><span class="line">                <span class="keyword">if</span>(dp[i] &amp;&amp; element == s.substr(i, e_size)) </span><br><span class="line">                    dp[i + e_size] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> dp[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Reference"   >          <a href="#Reference" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>      <p>[1] <span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/grandyang/p/4257740.html"  target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/4257740.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>[2] <span class="exturl"><a class="exturl__link"   href="https://zxi.mytechroad.com/blog/leetcode/leetcode-139-word-break/"  target="_blank" rel="noopener">https://zxi.mytechroad.com/blog/leetcode/leetcode-139-word-break/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;139-Word-Break-Medium&quot;   &gt;
          &lt;a href=&quot;#139-Word-Break-Medium&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#139-Word-Break-Medium&quot; class=&quot;headerlink&quot; title=&quot;139. Word Break / Medium&quot;&gt;&lt;/a&gt;139. Word Break / Medium&lt;/h1&gt;
      &lt;p&gt;Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.&lt;/p&gt;
&lt;p&gt;Note that the same word in the dictionary may be reused multiple times in the segmentation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】647. Palindromic Substrings 解題報告</title>
    <link href="https://bclin.tw/2021/06/17/leetcode-647/"/>
    <id>https://bclin.tw/2021/06/17/leetcode-647/</id>
    <published>2021-06-17T21:55:56.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="647-Palindromic-Substrings-Medium"   >          <a href="#647-Palindromic-Substrings-Medium" class="heading-link"><i class="fas fa-link"></i></a><a href="#647-Palindromic-Substrings-Medium" class="headerlink" title="647. Palindromic Substrings / Medium"></a>647. Palindromic Substrings / Medium</h1>      <p>Given a string s, return the number of palindromic substrings in it.</p><p>A string is a palindrome when it reads the same backward as forward.</p><p>A substring is a contiguous sequence of characters within the string.</p><a id="more"></a>        <h2 id="Example-1"   >          <a href="#Example-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2>      <blockquote><p>Input: s = “abc”<br>Output: 3<br>Explanation: Three palindromic strings: “a”, “b”, “c”.</p></blockquote>        <h2 id="Example-2"   >          <a href="#Example-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2>      <blockquote><p>Input: s = “aaa”<br>Output: 6<br>Explanation: Six palindromic strings: “a”, “a”, “a”, “aa”, “aa”, “aaa”.</p></blockquote>        <h2 id="Constraints"   >          <a href="#Constraints" class="heading-link"><i class="fas fa-link"></i></a><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h2>      <blockquote><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s consists of lowercase English letters.</li></ul></blockquote>        <h1 id="Solution-1-DP"   >          <a href="#Solution-1-DP" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-1-DP" class="headerlink" title="Solution 1: DP"></a>Solution 1: DP</h1>              <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <p>開一個 2-D vector 用來存 DP 狀態，dp[i][j] 代表子字串 s[i] ~ s[j] 是否是迴文。</p><p>迴文 (dp[i][j] == true) 的條件： </p><ol><li>(s[i] == s[j]) &amp;&amp; (j-i &lt; 2) <ul><li>可能是只有一個字元，如 a </li><li>兩個字元，如 aa</li></ul></li><li>(s[i] == s[j]) &amp;&amp; (dp[i+1][j-1] == true)<ul><li>組成迴文的條件，最左和最右的字元相等，而且去掉最邊邊的兩個字元後，也是迴文。 </li></ul></li></ol>        <h2 id="效能"   >          <a href="#效能" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity"   >          <a href="#Complexity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N^2)</li><li>Space Complexity: O(N^2)</li></ul>        <h3 id="LeetCode-Result"   >          <a href="#LeetCode-Result" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 12ms</li><li>Memory Usage: 7.6 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/509257996/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/509257996/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j] &amp;&amp; (j-i &lt; <span class="number">2</span> || dp[i+<span class="number">1</span>][j<span class="number">-1</span>])) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Solution-2-Brute-Force"   >          <a href="#Solution-2-Brute-Force" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-2-Brute-Force" class="headerlink" title="Solution 2: Brute Force"></a>Solution 2: Brute Force</h1>              <h2 id="思路-1"   >          <a href="#思路-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2>      <p>暴力解，遍歷每一個字元，每次都以其作為中點向左右展開判斷是否還是迴文，是就加一。看程式碼就很直白了。</p>        <h2 id="效能-1"   >          <a href="#效能-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能-1" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity-1"   >          <a href="#Complexity-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity-1" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N^2)</li><li>Space Complexity: O(1)</li></ul>        <h3 id="LeetCode-Result-1"   >          <a href="#LeetCode-Result-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result-1" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 0ms</li><li>Memory Usage: 13.3 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/509644577/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/509644577/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code-1"   >          <a href="#Code-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            count(s, i, i);</span><br><span class="line">            count(s, i, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &lt; size &amp;&amp; s[i] == s[j]) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            --i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="Solution-3-Manacher-Algorithm"   >          <a href="#Solution-3-Manacher-Algorithm" class="heading-link"><i class="fas fa-link"></i></a><a href="#Solution-3-Manacher-Algorithm" class="headerlink" title="Solution 3: Manacher Algorithm"></a>Solution 3: Manacher Algorithm</h1>              <h2 id="思路-2"   >          <a href="#思路-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2>      <p>著名的 Manacher （馬拉車）算法，只要線性時間就可以找出所有迴文，主要用於 LPS （Longest Palindromic Substring）問題。</p><p>但我自己每次都會忘記，網路上已經有很多關於 Manacher 的教學，就不多作解釋了。我推薦這篇：<span class="exturl"><a class="exturl__link"   href="https://havincy.github.io/blog/post/ManacherAlgorithm/"  target="_blank" rel="noopener">https://havincy.github.io/blog/post/ManacherAlgorithm/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="效能-2"   >          <a href="#效能-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能-2" class="headerlink" title="效能"></a>效能</h2>              <h3 id="Complexity-2"   >          <a href="#Complexity-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity-2" class="headerlink" title="Complexity"></a>Complexity</h3>      <ul><li>Time Complexity: O(N)</li><li>Space Complexity: O(N)</li></ul>        <h3 id="LeetCode-Result-2"   >          <a href="#LeetCode-Result-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result-2" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h3>      <ul><li>Runtime: 8ms</li><li>Memory Usage: 6.9 MB </li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/427086355/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/427086355/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h2 id="Code-2"   >          <a href="#Code-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        s = insertSymbol(s);</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> radius[<span class="number">3000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> C = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> mirror_i = C*<span class="number">2</span> - i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(mirror_i &gt;= <span class="number">1</span> &amp;&amp; i &lt; R &amp;&amp; (i + radius[mirror_i] &lt; R)) &#123;</span><br><span class="line">                radius[i] = radius[mirror_i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(s[i<span class="number">-1</span>-radius[i]] == s[i+<span class="number">1</span>+radius[i]]) &#123;       </span><br><span class="line">                ++radius[i];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+radius[i] &gt; R) &#123;</span><br><span class="line">                C = i;</span><br><span class="line">                R = i + radius[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            count += (radius[i]+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">insertSymbol</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> symbolString &#123;<span class="string">"$#"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">            symbolString += s[i];</span><br><span class="line">            symbolString += <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> symbolString + <span class="string">"^"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;647-Palindromic-Substrings-Medium&quot;   &gt;
          &lt;a href=&quot;#647-Palindromic-Substrings-Medium&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#647-Palindromic-Substrings-Medium&quot; class=&quot;headerlink&quot; title=&quot;647. Palindromic Substrings / Medium&quot;&gt;&lt;/a&gt;647. Palindromic Substrings / Medium&lt;/h1&gt;
      &lt;p&gt;Given a string s, return the number of palindromic substrings in it.&lt;/p&gt;
&lt;p&gt;A string is a palindrome when it reads the same backward as forward.&lt;/p&gt;
&lt;p&gt;A substring is a contiguous sequence of characters within the string.&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】143. Reorder List 解題報告</title>
    <link href="https://bclin.tw/2021/06/11/leetcode-143/"/>
    <id>https://bclin.tw/2021/06/11/leetcode-143/</id>
    <published>2021-06-11T21:09:56.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="143-Reorder-List-Medium"   >          <a href="#143-Reorder-List-Medium" class="heading-link"><i class="fas fa-link"></i></a><a href="#143-Reorder-List-Medium" class="headerlink" title="143. Reorder List / Medium"></a>143. Reorder List / Medium</h1>      <p>You are given the head of a singly linked-list. The list can be represented as:</p><blockquote><p>L0 → L1 → … → Ln - 1 → Ln</p></blockquote><a id="more"></a><p>Reorder the list to be on the following form:</p><blockquote><p>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → … </p></blockquote><p>You may not modify the values in the list’s nodes. Only nodes themselves may be changed.</p>        <h2 id="Example-1"   >          <a href="#Example-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2>      <p><img src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg" alt=""></p><blockquote><p>Input: head = [1,2,3,4] <br>Output: [1,4,2,3]</p></blockquote>        <h2 id="Example-2"   >          <a href="#Example-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2>      <p><img src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg" alt=""></p><blockquote><p>Input: head = [1,2,3,4,5] <br>Output: [1,5,2,4,3]</p></blockquote>        <h2 id="Constraints"   >          <a href="#Constraints" class="heading-link"><i class="fas fa-link"></i></a><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h2>      <blockquote><p>The number of nodes in the list is in the range [1, 5 * 104]. <br>1 &lt;= Node.val &lt;= 1000</p></blockquote>        <h1 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h1>      <p>這一題乍看複雜，其實不然。實際上可以被分成三個步驟：找中點、翻轉、合併。 <br>由於題目要求要在原來的 List 上進行操作，我們不能存到另一個新的 List。<br>首先找到整個 List 的中點，將 List 從中點斷開，形成兩個獨立的 List。<br>接著翻轉（Reverse）後半部的 List，最後再將後半部 List 的節點間隔地插入到前半部 List。</p><p>前兩個步驟可以參考另外兩題：</p><ol><li><ol start="876"><li>Middle of the Linked List</li></ol></li><li><ol start="206"><li>Reverse Linked List</li></ol></li></ol>        <h2 id="尋找中點"   >          <a href="#尋找中點" class="heading-link"><i class="fas fa-link"></i></a><a href="#尋找中點" class="headerlink" title="尋找中點"></a>尋找中點</h2>      <p>使用快慢指標，快的指標走兩步，慢的走一步，當快指標到 List 的尾巴時，慢的會剛好在中間。</p>        <h2 id="翻轉-合併-List"   >          <a href="#翻轉-合併-List" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻轉-合併-List" class="headerlink" title="翻轉 / 合併 List"></a>翻轉 / 合併 List</h2>      <p>好像沒什麼特別的，畫個圖就能理解了。很簡單的指標操作。</p>        <h1 id="效能"   >          <a href="#效能" class="heading-link"><i class="fas fa-link"></i></a><a href="#效能" class="headerlink" title="效能"></a>效能</h1>              <h2 id="Complexity"   >          <a href="#Complexity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2>      <ul><li>Time Complexity: O(N)</li><li>Space Complexity: O(1)</li></ul>        <h2 id="LeetCode-Result"   >          <a href="#LeetCode-Result" class="heading-link"><i class="fas fa-link"></i></a><a href="#LeetCode-Result" class="headerlink" title="LeetCode Result"></a>LeetCode Result</h2>      <ul><li>Runtime: 32 ms</li><li>Memory Usage: 17.8 MB</li><li><span class="exturl"><a class="exturl__link"   href="https://leetcode.com/submissions/detail/505846393/"  target="_blank" rel="noopener">https://leetcode.com/submissions/detail/505846393/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h1 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h1>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next || !head-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. Find the Middle Node</span></span><br><span class="line">        ListNode *fast = head, *slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. Reverse the Second List</span></span><br><span class="line">        ListNode *cur = slow-&gt;next, *pre = <span class="literal">NULL</span>;</span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode *next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Merge Two Lists</span></span><br><span class="line">        ListNode *t1, *t2;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span> &amp;&amp; pre != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            t1 = head-&gt;next;</span><br><span class="line">            t2 = pre-&gt;next;</span><br><span class="line">            head-&gt;next = pre;</span><br><span class="line">            pre-&gt;next = t1;</span><br><span class="line">            head = t1;</span><br><span class="line">            pre = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;143-Reorder-List-Medium&quot;   &gt;
          &lt;a href=&quot;#143-Reorder-List-Medium&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#143-Reorder-List-Medium&quot; class=&quot;headerlink&quot; title=&quot;143. Reorder List / Medium&quot;&gt;&lt;/a&gt;143. Reorder List / Medium&lt;/h1&gt;
      &lt;p&gt;You are given the head of a singly linked-list. The list can be represented as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;L0 → L1 → … → Ln - 1 → Ln&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://bclin.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>過度思考表象的現代社會《守門員的焦慮》</title>
    <link href="https://bclin.tw/2020/11/09/Die-Angst-des-Tormanns-beim-Elfmeter/"/>
    <id>https://bclin.tw/2020/11/09/Die-Angst-des-Tormanns-beim-Elfmeter/</id>
    <published>2020-11-09T15:58:27.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>前一陣子在逛誠品時，偶然看到木馬文化新譯了兩本 2019 年諾貝爾文學獎得主 Peter Handke 的作品《守門員的焦慮》以及《夢外之悲》。藉著這個機會，原本要買赫拉巴爾作品的我，改買了《守門員的焦慮》。</p><a id="more"></a><p>這是一本中短篇小說，約一百八十頁的篇幅，展現了存在主義式的社會斷裂感與無名的距離感，使我聯想到卡謬的《異鄉人》以及安部公房的《燃盡的地圖》，它們都帶有一種無法觸及、隔著薄膜的疏離感。</p>        <h2 id="迷失的細節"   >          <a href="#迷失的細節" class="heading-link"><i class="fas fa-link"></i></a><a href="#迷失的細節" class="headerlink" title="迷失的細節"></a>迷失的細節</h2>      <p>閱讀《守門員的焦慮》時，我第一個感受到的是文字的節奏不同其他小說。Handke 大量使用了簡單的描述句，而不是華麗且細節豐富的詞句。並排這些簡單的描述句除了引發一種近似音樂感的節奏，還增加了細節的重量。讀者從一個細節的簡易描述輕易且快速地被帶往下一個細節，從而引發一種快速地迭代感，由於句子簡單，還來不及細想便已讀到下一句，但句子的細節卻超重了，於是讀者被置於一種細節喪失的無力感中。</p><p>而這也是主角布洛赫所感受到的焦慮。</p><p><br><em>電影《守門員的焦慮》（1972）</em><br><img src="https://i.imgur.com/91NRlFo.jpg" alt=""></p>        <h2 id="象徵的解讀"   >          <a href="#象徵的解讀" class="heading-link"><i class="fas fa-link"></i></a><a href="#象徵的解讀" class="headerlink" title="象徵的解讀"></a>象徵的解讀</h2>      <blockquote><p>「守門員眼看著球滾過了球門線……」<br>曾是知名足球守門員的裝配工人約瑟夫．布洛赫在上午上工報到時被通知遭到解雇。<br>至少這是布洛赫對下述事實的解讀：<br>當她出現在工人聚集的工寮門口，就只有工頭一邊吃著點心還抬眼看他。</p></blockquote><p>小說的開頭描述了曾是守門員的主角布洛赫，被解雇了。而出乎讀者意料的，是主角判斷自己被解雇的依據，竟然是因為只有工頭邊吃點心還看著他。<br>正如同楊照在說書中所提及：「表面的訊息跟內在的意義在這個小說中都斷裂開了。」<br>這種將象徵與意義拆解開的筆法尤其令讀者不解，甚至不安。搭配極多的細節與快節奏，營造出的效果，就像電影中快速剪輯的鏡頭一樣。</p><p>一如開頭的例子，我們幾乎總是能在小說中看到類似的描述：</p><blockquote><p>先前當他一言未發地把錢歌在轉盤上，售票小姐就彷彿理所當然地用另一個動作來回應。事後這令他感到納悶。</p></blockquote><blockquote><p>他向一個警察打招呼，以為這能讓對方停下腳步，但警察沒有回禮。布洛赫納悶警察是否沒有正確解讀他隔著馬路呼喊的話語，又想起戲院那個售票小姐把電影票用轉盤轉到他面前地那份理所當然。她迅速地動作令他大為吃驚，使他差點忘了把電影票從轉盤上拿走。他決定去找那名售票小姐。</p></blockquote><p>又或者是下列這段，充分展現出主角因擔憂而幾近崩潰的過度思考。</p><blockquote><p>外面有一件金屬敲在窗玻璃上。當他問起，老闆娘答道是避雷針的導線鬆脫了。先前在學校裡布洛赫就曾注意到一個避雷針，立刻把這個重複出現理解為蓄意；他接連兩次遇到避雷針，這不可能是巧合。他根本就覺得所有的東西都很相似，所有的事物都使他互相聯想。避雷針重複出現意味著什麼呢？他該從避雷針身上看出什麼？「避雷針」？這大概又是個文字遊戲？意思是他不會出事？還是說這暗示著他該向老闆娘全盤托出？而那邊木盤上的餅乾為什麼是魚的形狀？它們在影射什麼？是說他應該「像魚一樣沉默」嗎？他不該再往下說？木盤上的餅乾是在向她暗示這個嗎？彷彿他並非看見了這一切，而是某處從一張行為準則布告上讀到的。</p></blockquote>        <h3 id="反小說"   >          <a href="#反小說" class="heading-link"><i class="fas fa-link"></i></a><a href="#反小說" class="headerlink" title="反小說"></a>反小說</h3>      <p>作者在書中並未採用全知角度敘事，意味著讀者必須與布洛赫共同分擔狀況未明的擔憂或焦慮。我們不知道鐘聲是納許市場傳出來的，亦或是電影中的音效。讀者跟著布洛赫一起觀察、推測、忐忑，卻直到最後也沒有答案，甚至無從確認是否真的有人知道是布洛赫犯下犯行。</p>        <h2 id="在社會中存找意義"   >          <a href="#在社會中存找意義" class="heading-link"><i class="fas fa-link"></i></a><a href="#在社會中存找意義" class="headerlink" title="在社會中存找意義"></a>在社會中存找意義</h2>      <p>人類社會自古至今演化出了許多種集體的潛規則與共識，無論是物品、手勢、動作甚至符號的意義，都是人類社會中重要的一環。<br>我們依靠這種不言自明的共識組建起結構複雜的社會，而不必花時間去釐清背後的涵義。</p><p>即便我們訂下了許多意義，社會中總有一群人無法正確地解讀它們，由於社會化的程度不高導致缺乏關注，他們很容易變成治安的隱患。</p><p>布洛赫正是這一種人，在事件發生前，他便已無法正確將「表面的訊息」跟「內在的意義」連結在一起，在事件後由於焦慮，這樣的狀況更加嚴重。<br>如果一個在社會中的人不被社會認可，或是無法解讀自身的存在，強烈的疏離感很容易使人迷失對自身的價值評估。</p>        <h2 id="守門員的焦慮"   >          <a href="#守門員的焦慮" class="heading-link"><i class="fas fa-link"></i></a><a href="#守門員的焦慮" class="headerlink" title="守門員的焦慮"></a>守門員的焦慮</h2>      <p>其實本書原文的標題應為「守門員對罰球的焦慮」</p><blockquote><p>「射門球員一旦起跑，在球即將被射出之前，守門員就會不自覺地用身體暗示出他會朝哪個方向撲出去，而射門球員就能好整以暇地往另一個方向踢。」布洛赫說<br>「守門員的無奈就好比試圖用一根麥桿來撬開一扇門」</p></blockquote><p>由此我們可以得知，所謂守門員 — 或說是布洛赫的焦慮，其實是不斷要去解讀射門球員的動作。或許射門球員知道守門員知道他會往哪裡射，於是改射另一個角落；或許射門球員想到守門員也猜測到這一步了，於是又改回原來的角落。這樣的思考猜測是無止盡的。</p><p>而我們也從開頭知道，布洛赫後來並不是一個合格的守門員。可以說，在球場上他已無法猜測射門球員的心思，在社會中也依然無法猜測社會符號的涵義。在生活中，他依然是「試圖用一根麥桿來撬開一扇門」這般無力。</p><p>直到最後，布洛赫也無法逃脫這份根深柢固的焦慮。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li>布洛赫喝得相當醉。所有的東西似乎都在他的視野之外。他距離那些正在發生的事如此遙遠，乃至於他本身根本不再出現在他的所見所聞之中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一陣子在逛誠品時，偶然看到木馬文化新譯了兩本 2019 年諾貝爾文學獎得主 Peter Handke 的作品《守門員的焦慮》以及《夢外之悲》。藉著這個機會，原本要買赫拉巴爾作品的我，改買了《守門員的焦慮》。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>多維空間旅行，談《平面國》</title>
    <link href="https://bclin.tw/2020/11/06/flatland/"/>
    <id>https://bclin.tw/2020/11/06/flatland/</id>
    <published>2020-11-06T17:25:40.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天看了 Edwin A. Abbott 的名作《平面國》，這部薄薄的中篇小說寫成於 1884 年，描寫一個虛構的二維國家：平面國，並藉由正方形的第一人稱敘事，帶領讀者穿梭於不同維度並揭開平面國的真相。</p><!-- more --><p>就我個人來看，我認為《平面國》這本小說有兩個重要的涵義，一是利用簡單的幾何知識來帶領讀者認識不同維度的概念；二是描寫了一個經典的反烏托邦形式國家。</p>        <h1 id="平面國"   >          <a href="#平面國" class="heading-link"><i class="fas fa-link"></i></a><a href="#平面國" class="headerlink" title="平面國"></a>平面國</h1>              <h2 id="維度"   >          <a href="#維度" class="heading-link"><i class="fas fa-link"></i></a><a href="#維度" class="headerlink" title="維度"></a>維度</h2>      <p>直到現在，許多科幻作品都仍有描寫維度的內容，無論是電影、小說、動漫畫都有類似的穿越維度情節。但「維度」（Dimension）一詞對於非數理工科背景的閱聽者來說，是比較陌生且難以想像的概念。</p>        <h3 id="大眾文化"   >          <a href="#大眾文化" class="heading-link"><i class="fas fa-link"></i></a><a href="#大眾文化" class="headerlink" title="大眾文化"></a>大眾文化</h3>      <p>近幾年比較有代表性的或許是 Christopher Nolan 在 2014 年的《星際效應》（Interstellar），主角 Cooper 來到了五維空間。然而，諸如這類電影，或是大眾流行文化中的高維空間，其實是對相對論的中閔可夫斯基時空的誤用，就跟《天能》（Tenet）中把 Inverse Entropy 與時間綁在一起相同。事實上，我更喜歡《平面國》這種歐式空間維度，在劉慈欣《三體》中的高維概念也是應用歐式空間維度，時間則作為獨立維度從空間維度中切割出來。</p><p>這倒也不是 Nolan 的問題，畢竟大眾文化中的高維度與時間脫不了關係，再者，在電影中要表現出四維以上的空間，確實是相當難的一件事情。</p>        <h3 id="平面國-1"   >          <a href="#平面國-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#平面國-1" class="headerlink" title="平面國"></a>平面國</h3>      <p>上世紀的科幻界代表人物，艾西莫夫（Issac Asimov）曾評《平面國》是：「所能找到感受維度方法中最好的」（The best introduction one can find into the manner of perceiving dimensions.）</p><p>這也是為什麼現今這本書依然是數理背景人士的愛好，僅僅是透過簡單的幾何概念與一篇小故事，便能直接地感受維度的概念，是非常厲害的一件事情。</p><p>《平面國》一書從平面為主題下手，我想也是因為，二維與三維空間相對於其他維度，是一般人較為熟悉的。</p>        <h2 id="反烏托邦"   >          <a href="#反烏托邦" class="heading-link"><i class="fas fa-link"></i></a><a href="#反烏托邦" class="headerlink" title="反烏托邦"></a>反烏托邦</h2>      <p>《平面國》事實上就是一個反烏托邦故事。看似一切都完滿而好的世界，其實有很大的陰謀。統治階級為了鞏固利益而設置不平等的政策，同時隱瞞更高維度的存在，恣意逮捕或處死相關的人。</p><p>這種故事與後來 George Orwell 的《動物農莊》極為相似，在短短的篇幅裡描寫了寓意頗深的反烏托邦故事。只是一個是幾何圖形，另一個是以動物為主角。</p><p>平面國是一個二維國家，故事中，本書的作者是身為律師階級的正方形。<br>一開始正方形詳盡描述了平面國是怎麼樣的一個國家，包括空間、社會、自然環境、種族、政策。正方形撰寫關於人文方面的事情時，口氣極為理所當然，讀者可以從中讀出些許不對勁，畢竟 19 世紀的歐美白人奴役黑人也是這般理所當然。</p><p>從正方形所說的色彩革命與階級革命，並且把圓形稱為「主教」、「牧師」，甚至是禁止「有色」，都可以看出作者諷刺的對象與事件。不得不說，19 世紀能有這樣的作品，實屬難得。</p>        <h1 id="總結"   >          <a href="#總結" class="heading-link"><i class="fas fa-link"></i></a><a href="#總結" class="headerlink" title="總結"></a>總結</h1>      <p>無論是喜歡科幻作品或反烏托邦作品的人，都應該好好讀一下兩個世紀前的《平面國》，平易近人，卻深刻又有力。</p><p>雖然科技進步很快速，科幻作品卻始終在更遠方等待我們，探討一些現實卻力所不能及的議題，我想這是我喜歡科幻作品的原因。</p><p>平面國的維度雖然並非我們所能體會，但當中的人性卻是我們可以深思的。在科技進步飛速的今天，人類並不該忘記人類靈魂中最重要且寶貴的東西。</p>]]></content>
    
    <summary type="html">
    
      平面國，一個經典科幻故事。
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>ETW 介紹 2 - Consumer</title>
    <link href="https://bclin.tw/2020/07/30/ETW-2-Consumer/"/>
    <id>https://bclin.tw/2020/07/30/ETW-2-Consumer/</id>
    <published>2020-07-30T11:20:27.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇文章介紹了 ETW 和簡單的使用方式，這次我們要加入 Consumer，使得我們可以即時接收事件。</p><a id="more"></a><p><img src="https://i.imgur.com/aOTJ0dc.png" alt=""></p>        <h1 id="Consumer"   >          <a href="#Consumer" class="heading-link"><i class="fas fa-link"></i></a><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h1>      <p>顧名思義，Consumer 就是事件的消費者，消費的方式主要有兩種，從 Log file，或以 Real-time mode 從 Provider 收事件。在這裡，我們會先用到 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_logfilea"  target="_blank" rel="noopener">EVENT_TRACE_LOGFILE</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 這個結構。</p>        <h2 id="原來的設定"   >          <a href="#原來的設定" class="heading-link"><i class="fas fa-link"></i></a><a href="#原來的設定" class="headerlink" title="原來的設定"></a>原來的設定</h2>      <p>我們需要先更改 pSessionProperties 的 LogFileMode，讓其支援 REAL TIME MODE：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pSessionProperties-&gt;LogFileMode = EVENT_TRACE_REAL_TIME_MODE | EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化結構"   >          <a href="#初始化結構" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化結構" class="headerlink" title="初始化結構"></a>初始化結構</h2>      <p>首先我們要宣告一組 EVENT_TRACE_LOGFILE，並先定義收發的模式。<br>再結構中，ProcessTraceMode 其實是 union 的一員，另外還有一個 LogFileMode，但 MSDN 表示這個只是保留，勿使用 LogFileMode。</p><p>我們要使用 Real-time 模式，這個值要設為 PROCESS_TRACE_MODE_REAL_TIME，另外因為我們要用 EventRecordCallback，所以還必須要加上 PROCESS_TRACE_MODE_EVENT_RECORD。</p><p>接下來，我們要設定從哪一個 Session 即時地收事件，把 LoggerName 設成你自己設的 Session 就可以了，這裡要注意的是，如果有設 LoggerName，那LogFileName 就必須設成 NULL (在C++中應該是 nullptr)。</p><p>接著把 EventRecordCallback 設成你要被 Callback 的 function。</p><p>最後用 OpenTrace() 把這個 Consumer 叫起來。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EVENT_TRACE_LOGFILE TraceLogFile = &#123;&#125;;</span><br><span class="line">ZeroMemory(&amp;TraceLogFile, <span class="keyword">sizeof</span>(EVENT_TRACE_LOGFILE));</span><br><span class="line">TraceLogFile.ProcessTraceMode = PROCESS_TRACE_MODE_REAL_TIME | PROCESS_TRACE_MODE_EVENT_RECORD;</span><br><span class="line">TraceLogFile.LogFileName = <span class="literal">NULL</span>; <span class="comment">// ETWLOGPATH;</span></span><br><span class="line">TraceLogFile.LoggerName = LPWSTR(LOGSESSION_NAME);</span><br><span class="line">TraceLogFile.EventRecordCallback = ETW::EventRecordCallback;</span><br><span class="line"></span><br><span class="line">hTraceHandle = OpenTrace(&amp;TraceLogFile);</span><br><span class="line"><span class="keyword">if</span> (hTraceHandle == INVALID_PROCESSTRACE_HANDLE)</span><br><span class="line">&#123;</span><br><span class="line">    printf_s(<span class="string">"OpenTrace fail: %lu\n"</span>, GetLastError());</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Callback"   >          <a href="#Callback" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2>      <p>Callback function 這邊，我設了一個 function 叫做 EventRecordCallback，一旦我們收到事件，就會呼叫這個 Callback function，建立一個文字檔，寫進 Hello event!</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID WINAPI <span class="title">EventRecordCallback</span><span class="params">(EVENT_RECORD*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ETW::EventRecordCallback(EVENT_RECORD* pEventRecord)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; header = pEventRecord-&gt;EventHeader;</span><br><span class="line"></span><br><span class="line">    DWORD cbWritten;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HANDLE hFile = CreateFileW(<span class="string">L"C:\\test\\callback_log.txt"</span>, FILE_ALL_ACCESS, <span class="number">0</span>, <span class="number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hFile != INVALID_HANDLE_VALUE)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteFile(hFile, <span class="string">"Hello event!\n"</span>, <span class="keyword">sizeof</span>(<span class="string">"Hello event!\n"</span>), &amp;cbWritten, <span class="literal">nullptr</span>);</span><br><span class="line">        CloseHandle(hFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf_s(<span class="string">"ProcessId: %ul \n"</span>, header.ProcessId);</span><br><span class="line">    printf_s(<span class="string">"ThreadId: %ul \n"</span>, header.ThreadId);</span><br><span class="line">    printf_s(<span class="string">"ProviderId: %ul-%ul-%ul-%s \n"</span>, header.ProviderId.Data1, header.ProviderId.Data2, header.ProviderId.Data3, header.ProviderId.Data4);</span><br><span class="line">    printf_s(<span class="string">"EventDescriptor.Id: %d \n"</span>, header.EventDescriptor.Id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="收-Event"   >          <a href="#收-Event" class="heading-link"><i class="fas fa-link"></i></a><a href="#收-Event" class="headerlink" title="收 Event"></a>收 Event</h2>      <p>要收 Event 的時候，我們要呼叫 ProcessTrace()，呼叫之後就會開始收 Event 叫 Callback 了。直到 BufferCallback （另一種 callback）回傳 FALSE，或是 CloseTrace 被呼叫。所以基本上，這裡我們應該開另一個 Thread 來處理才對。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wprintf_s(<span class="string">L"ProcessTraceThread start.\n"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> status = ProcessTrace(&amp;hTraceHandle, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (status != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf_s(<span class="string">L"ProcessTrace error: 0x%x\n"</span>, status);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wprintf_s(<span class="string">L"ProcessTraceThread Finish.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br></pre></td></tr></table></div></figure><p>至於 Close，基本上大同小異，叫 CloseTrace() 來處理。這樣一下 ProcessTrace() 就會關閉了。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hSession)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf_s(<span class="string">L"Call CloseTrace().\n"</span>);</span><br><span class="line">    CloseTrace(hSession);</span><br><span class="line">    hSession = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章介紹了 ETW 和簡單的使用方式，這次我們要加入 Consumer，使得我們可以即時接收事件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>ETW 介紹 - 以 Event Tracing Session 為範例</title>
    <link href="https://bclin.tw/2020/07/29/ETW/"/>
    <id>https://bclin.tw/2020/07/29/ETW/</id>
    <published>2020-07-29T10:40:27.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>因為工作需求，開始接觸 Windows System Programming，每次都覺得 MSDN 寫的很混亂，有時候太注重細節，對於系統沒有全面性的介紹；有時又只有概論，沒有程式碼或實作內容；有些甚至把不同的文件連結在一起就結束了。即使是 Google 找到的資料也比日本製的壓縮機還稀少。最後只能花時間慢慢測試，聽部門的人說，有好幾次都是他們自己試出很 tricky 的用法，跟微軟的技術人員聊一聊，結果居然變成 MSDN 的內容，不知道該哭還是笑。</p><a id="more"></a>        <h1 id="什麼是-ETW-？"   >          <a href="#什麼是-ETW-？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什麼是-ETW-？" class="headerlink" title="什麼是 ETW ？"></a>什麼是 ETW ？</h1>      <p>ETW(Event Tracing for Windows) 是 Windows 提供的一種事件追蹤的方式，利用 ETW 可以實現 real-time 的高速事件追蹤，讓程式設計師可以利用事件做除錯或是效能優化。</p><p><img src="https://i.imgur.com/aOTJ0dc.png" alt=""></p><p>ETW 分為三個部分，Controller、Provider 和 Consumer，Controller 可以開關 Provider，Provider 會提供事件（Event）本身，而 Consumer 則是消費（Consume）事件的人，也就是我們的角色。</p><p>另外，Controller 可以註冊 Session 並設定要負責的 Provrider，Provider 會把本身的事件發給 Session，Session 可以把事件直接發給 Consumer（Real-time mode），或是存到一個 Trace File，Consumer 再去這個檔案拿事件（File Mode）。</p>        <h2 id="Sessions"   >          <a href="#Sessions" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h2>      <p>Session 會從一個或多個 Providers 記錄事件，並且也負責管理和清除 buffer 的資料，而 Session 本身的屬性則是由 Controller 設定的。</p><p>Session 分為很多種：</p><ul><li>Event Tracing Session</li><li>SystemTraceProvider Session<ul><li>NT Kernel Logger Session</li></ul></li><li>AutoLogger Session<ul><li>Global Logger Session</li></ul></li><li>Private Logger Session</li></ul><p>我們在這裡先探討如何簡單地使用 Event tracing sessions 把 Events 存到 Log file。</p>        <h1 id="使用-Event-Tracing-Session"   >          <a href="#使用-Event-Tracing-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用-Event-Tracing-Session" class="headerlink" title="使用 Event Tracing Session"></a>使用 Event Tracing Session</h1>      <p>我們參考 MSDN 上的範例，<span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/example-that-creates-a-session-and-enables-a-manifest-based-provider"  target="_blank" rel="noopener">Example that Creates a Session and Enables a Manifest-based or Classic Provider</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="定義常數"   >          <a href="#定義常數" class="heading-link"><i class="fas fa-link"></i></a><a href="#定義常數" class="headerlink" title="定義常數"></a>定義常數</h2>      <p>首先定義 Log file 的位置，以及 Session 的名稱。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE_PATH <span class="meta-string">L"&lt;FULLPATHTOLOGFILE.etl&gt;"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGSESSION_NAME <span class="meta-string">L"My Event Trace Session"</span></span></span><br></pre></td></tr></table></div></figure><p>接下來是 Session 的 GUID 以及 Provider 的 GUID，其中 Session 的 GUID 是自己設定的唯一值。<br>Provider 的 GUID 則可以透過在 cmd 下 logman query providers 找到。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;AE44CB98-BD11-4069-8093-770EC9258A12&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID SessionGuid = </span><br><span class="line">&#123; <span class="number">0xae44cb98</span>, <span class="number">0xbd11</span>, <span class="number">0x4069</span>, &#123; <span class="number">0x80</span>, <span class="number">0x93</span>, <span class="number">0x77</span>, <span class="number">0xe</span>, <span class="number">0xc9</span>, <span class="number">0x25</span>, <span class="number">0x8a</span>, <span class="number">0x12</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;D8909C24-5BE9-4502-98CA-AB7BDC24899D&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID ProviderGuid = </span><br><span class="line">&#123; <span class="number">0xd8909c24</span>, <span class="number">0x5be9</span>, <span class="number">0x4502</span>, &#123;<span class="number">0x98</span>, <span class="number">0xca</span>, <span class="number">0xab</span>, <span class="number">0x7b</span>, <span class="number">0xdc</span>, <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x9d</span> &#125; &#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="初始化空間"   >          <a href="#初始化空間" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化空間" class="headerlink" title="初始化空間"></a>初始化空間</h2>      <p>首先要為 Session 建立一個空間，儲存 Session 的結構是 EVENT_TRACE_PROPERTIES (Evntrace.h)，但我們還需要儲存上面定義的 Logfile Path 以及 Session name，所以總長會是三者相加。之後再用 malloc 向系統要一塊記憶體。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ULONG status = ERROR_SUCCESS;</span><br><span class="line">TRACEHANDLE SessionHandle = <span class="number">0</span>;</span><br><span class="line">EVENT_TRACE_PROPERTIES* pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">ULONG BufferSize = <span class="number">0</span>;</span><br><span class="line">BOOL TraceOn = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate memory for the session properties. The memory must</span></span><br><span class="line"><span class="comment">// be large enough to include the log file name and session name,</span></span><br><span class="line"><span class="comment">// which get appended to the end of the session properties structure.</span></span><br><span class="line">    </span><br><span class="line">BufferSize = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGFILE_PATH) + <span class="keyword">sizeof</span>(LOGSESSION_NAME);</span><br><span class="line">pSessionProperties = (EVENT_TRACE_PROPERTIES*) <span class="built_in">malloc</span>(BufferSize);    </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pSessionProperties)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"Unable to allocate %d bytes for properties structure.\n"</span>, BufferSize);</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="配置-Session"   >          <a href="#配置-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置-Session" class="headerlink" title="配置 Session"></a>配置 Session</h2>      <p>我們剛才已經將記憶體空間準備好了，現在要來設置當中的設定。<br>關於詳細的結構內容可以參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_properties"  target="_blank" rel="noopener">EVENT_TRACE_PROPERTIES structure</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <br>我們不需要完整設定全部的內容，除了必要的欄位，其他的欄位會在啟動時被填入預設值。</p><p>首先我們利用 ZeroMemory() 初始化這塊空間，ZeroMemory 是微軟對 memset 的封裝，將目標空間填 0。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/3038302/why-do-zeromemory-etc-exist-when-there-are-memset-etc-already"  target="_blank" rel="noopener">Why do ZeroMemory, etc. exist when there are memset, etc. already?</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>接下來開始填入 pSessionProperties 的內容。<br>EVENT_TRACE_PROPERTIES 結構中有一個 Wnode 的結構，我們必須設定它的 BufferSize、Flags 以及 Guid， ClientContext 則是選擇性的。Guid 填入我們所定義的 SessionGuid，Flags 則必須包含 WNODE_FLAG_TRACED_GUID。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/wnode-header"  target="_blank" rel="noopener">WNODE_HEADER structure</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>接著是 LogFileMode，設定我們要採用什麼模式去紀錄 Event tracing session，可以是記錄到 log file，也可以即時呼叫 callback，或兩者同時採用。其設定請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/etw/logging-mode-constants"  target="_blank" rel="noopener">Logging Mode Constants</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。在範例中，EVENT_TRACE_FILE_MODE_SEQUENTIAL 代表將事件循序寫入 Log file 中，直到我們設定的檔案大小，也就是 MaximumFileSize。值得注意的是，如果我們把儲存 log file 的路徑設定在和作業系統同一個磁碟區，ETW 會另外檢查是否有 200MB 的空間可以用。即，我們設定 100MB，實際的磁碟空間要求會是 300MB。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the session properties. You only append the log file name</span></span><br><span class="line"><span class="comment">// to the properties structure; the StartTrace function appends</span></span><br><span class="line"><span class="comment">// the session name for you.</span></span><br><span class="line"></span><br><span class="line">ZeroMemory(pSessionProperties, BufferSize);</span><br><span class="line">pSessionProperties-&gt;Wnode.BufferSize = BufferSize;</span><br><span class="line">pSessionProperties-&gt;Wnode.Flags = WNODE_FLAG_TRACED_GUID;</span><br><span class="line">pSessionProperties-&gt;Wnode.ClientContext = <span class="number">1</span>; <span class="comment">//QPC clock resolution</span></span><br><span class="line">pSessionProperties-&gt;Wnode.Guid = SessionGuid; </span><br><span class="line">pSessionProperties-&gt;LogFileMode = EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br><span class="line">pSessionProperties-&gt;MaximumFileSize = <span class="number">1</span>;  <span class="comment">// 1 MB</span></span><br><span class="line">pSessionProperties-&gt;LoggerNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES);</span><br><span class="line">pSessionProperties-&gt;LogFileNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGSESSION_NAME); </span><br><span class="line">StringCbCopy((LPWSTR)((<span class="keyword">char</span>*)pSessionProperties + pSessionProperties-&gt;LogFileNameOffset), <span class="keyword">sizeof</span>(LOGFILE_PATH), LOGFILE_PATH);</span><br></pre></td></tr></table></div></figure>        <h2 id="建立-Session"   >          <a href="#建立-Session" class="heading-link"><i class="fas fa-link"></i></a><a href="#建立-Session" class="headerlink" title="建立 Session"></a>建立 Session</h2>      <p>我們已經把 Session 的內容都寫好了，就像前面所述，Session 是由 Controller 操控，所以接下來，我們要利用 Controller 的 API 來建立、修改或啟動 Session。</p>        <h3 id="Controller-API"   >          <a href="#Controller-API" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller-API" class="headerlink" title="Controller API"></a>Controller API</h3>      <p>Controller 的 API 主要有 </p><ul><li>StartTrace()<ul><li>啟動 Session。</li></ul></li><li>ControlTrace()<ul><li>控制 Session，包括修改與中止。</li></ul></li><li>EnableTraceEx2()<ul><li>在 Windows 8.1 與 Windows Server 2012 R2 之後的版本才呼叫 EnableTraceEx2()，更之前有 EnableTrace() 及 EnableTraceEx()。</li></ul></li></ul><p>要把這個 Session 實際建立起來，直接呼叫 StartTrace，填入 TRACEHANDLE、Session name 以及我們剛剛配置好的結構 EVENT_TRACE_PROPERTIES 便可以了。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">status = StartTrace((PTRACEHANDLE)&amp;SessionHandle, LOGSESSION_NAME, pSessionProperties);</span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"StartTrace() failed with %lu\n"</span>, status);</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="啟動-Provider"   >          <a href="#啟動-Provider" class="heading-link"><i class="fas fa-link"></i></a><a href="#啟動-Provider" class="headerlink" title="啟動 Provider"></a>啟動 Provider</h2>      <p>我們利用 EnableTraceEx2() 將 Session 和 Provider 綁在一起，並啟動 Provider、設定要接收的事件等級，在範例中設定的是 TRACE_LEVEL_INFORMATION。詳細請參考 <span class="exturl"><a class="exturl__link"   href="https://docs.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-enabletraceex2"  target="_blank" rel="noopener">EnableTraceEx2 function</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的 Level，總共有五個等級。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">status = EnableTraceEx2(</span><br><span class="line">    SessionHandle,</span><br><span class="line">    (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">    EVENT_CONTROL_CODE_ENABLE_PROVIDER,</span><br><span class="line">    TRACE_LEVEL_INFORMATION,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">&#123;</span><br><span class="line">    wprintf(<span class="string">L"EnableTrace() failed with %lu\n"</span>, status);</span><br><span class="line">    TraceOn = FALSE;</span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Cleanup"   >          <a href="#Cleanup" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h2>      <p>在 EnableTraceEx2() 傳入 EVENT_CONTROL_CODE_DISABLE_PROVIDER 將 Provider 關閉，再用 ControlTrace 傳入 EVENT_TRACE_CONTROL_STOP 關閉 Session。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SessionHandle)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (TraceOn)</span><br><span class="line">    &#123;</span><br><span class="line">        status = EnableTraceEx2(</span><br><span class="line">            SessionHandle,</span><br><span class="line">            (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">            EVENT_CONTROL_CODE_DISABLE_PROVIDER,</span><br><span class="line">            TRACE_LEVEL_INFORMATION,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = ControlTrace(SessionHandle, LOGSESSION_NAME, pSessionProperties, EVENT_TRACE_CONTROL_STOP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"ControlTrace(stop) failed with %lu\n"</span>, status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pSessionProperties)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(pSessionProperties);</span><br><span class="line">    pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="完整程式碼"   >          <a href="#完整程式碼" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strsafe.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wmistr.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;evntrace.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGFILE_PATH <span class="meta-string">L"&lt;FULLPATHTOLOGFILE.etl&gt;"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGSESSION_NAME <span class="meta-string">L"My Event Trace Session"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GUID that identifies your trace session.</span></span><br><span class="line"><span class="comment">// Remember to create your own session GUID.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;AE44CB98-BD11-4069-8093-770EC9258A12&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID SessionGuid = </span><br><span class="line">&#123; <span class="number">0xae44cb98</span>, <span class="number">0xbd11</span>, <span class="number">0x4069</span>, &#123; <span class="number">0x80</span>, <span class="number">0x93</span>, <span class="number">0x77</span>, <span class="number">0xe</span>, <span class="number">0xc9</span>, <span class="number">0x25</span>, <span class="number">0x8a</span>, <span class="number">0x12</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GUID that identifies the provider that you want</span></span><br><span class="line"><span class="comment">// to enable to your session.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;D8909C24-5BE9-4502-98CA-AB7BDC24899D&#125;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GUID ProviderGuid = </span><br><span class="line">&#123; <span class="number">0xd8909c24</span>, <span class="number">0x5be9</span>, <span class="number">0x4502</span>, &#123;<span class="number">0x98</span>, <span class="number">0xca</span>, <span class="number">0xab</span>, <span class="number">0x7b</span>, <span class="number">0xdc</span>, <span class="number">0x24</span>, <span class="number">0x89</span>, <span class="number">0x9d</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wmain</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ULONG status = ERROR_SUCCESS;</span><br><span class="line">    TRACEHANDLE SessionHandle = <span class="number">0</span>;</span><br><span class="line">    EVENT_TRACE_PROPERTIES* pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">    ULONG BufferSize = <span class="number">0</span>;</span><br><span class="line">    BOOL TraceOn = TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate memory for the session properties. The memory must</span></span><br><span class="line">    <span class="comment">// be large enough to include the log file name and session name,</span></span><br><span class="line">    <span class="comment">// which get appended to the end of the session properties structure.</span></span><br><span class="line">    </span><br><span class="line">    BufferSize = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGFILE_PATH) + <span class="keyword">sizeof</span>(LOGSESSION_NAME);</span><br><span class="line">    pSessionProperties = (EVENT_TRACE_PROPERTIES*) <span class="built_in">malloc</span>(BufferSize);    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pSessionProperties)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Unable to allocate %d bytes for properties structure.\n"</span>, BufferSize);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set the session properties. You only append the log file name</span></span><br><span class="line">    <span class="comment">// to the properties structure; the StartTrace function appends</span></span><br><span class="line">    <span class="comment">// the session name for you.</span></span><br><span class="line"></span><br><span class="line">    ZeroMemory(pSessionProperties, BufferSize);</span><br><span class="line">    pSessionProperties-&gt;Wnode.BufferSize = BufferSize;</span><br><span class="line">    pSessionProperties-&gt;Wnode.Flags = WNODE_FLAG_TRACED_GUID;</span><br><span class="line">    pSessionProperties-&gt;Wnode.ClientContext = <span class="number">1</span>; <span class="comment">//QPC clock resolution</span></span><br><span class="line">    pSessionProperties-&gt;Wnode.Guid = SessionGuid; </span><br><span class="line">    pSessionProperties-&gt;LogFileMode = EVENT_TRACE_FILE_MODE_SEQUENTIAL;</span><br><span class="line">    pSessionProperties-&gt;MaximumFileSize = <span class="number">1</span>;  <span class="comment">// 1 MB</span></span><br><span class="line">    pSessionProperties-&gt;LoggerNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES);</span><br><span class="line">    pSessionProperties-&gt;LogFileNameOffset = <span class="keyword">sizeof</span>(EVENT_TRACE_PROPERTIES) + <span class="keyword">sizeof</span>(LOGSESSION_NAME); </span><br><span class="line">    StringCbCopy((LPWSTR)((<span class="keyword">char</span>*)pSessionProperties + pSessionProperties-&gt;LogFileNameOffset), <span class="keyword">sizeof</span>(LOGFILE_PATH), LOGFILE_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the trace session.</span></span><br><span class="line"></span><br><span class="line">    status = StartTrace((PTRACEHANDLE)&amp;SessionHandle, LOGSESSION_NAME, pSessionProperties);</span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"StartTrace() failed with %lu\n"</span>, status);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the providers that you want to log events to your session.</span></span><br><span class="line"></span><br><span class="line">    status = EnableTraceEx2(</span><br><span class="line">        SessionHandle,</span><br><span class="line">        (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">        EVENT_CONTROL_CODE_ENABLE_PROVIDER,</span><br><span class="line">        TRACE_LEVEL_INFORMATION,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"EnableTrace() failed with %lu\n"</span>, status);</span><br><span class="line">        TraceOn = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wprintf(<span class="string">L"Run the provider application. Then hit any key to stop the session.\n"</span>);</span><br><span class="line">    _getch();</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SessionHandle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TraceOn)</span><br><span class="line">        &#123;</span><br><span class="line">            status = EnableTraceEx2(</span><br><span class="line">                SessionHandle,</span><br><span class="line">                (LPCGUID)&amp;ProviderGuid,</span><br><span class="line">                EVENT_CONTROL_CODE_DISABLE_PROVIDER,</span><br><span class="line">                TRACE_LEVEL_INFORMATION,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="literal">NULL</span></span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        status = ControlTrace(SessionHandle, LOGSESSION_NAME, pSessionProperties, EVENT_TRACE_CONTROL_STOP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ERROR_SUCCESS != status)</span><br><span class="line">        &#123;</span><br><span class="line">            wprintf(<span class="string">L"ControlTrace(stop) failed with %lu\n"</span>, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pSessionProperties)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pSessionProperties);</span><br><span class="line">        pSessionProperties = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="結語"   >          <a href="#結語" class="heading-link"><i class="fas fa-link"></i></a><a href="#結語" class="headerlink" title="結語"></a>結語</h1>      <p>最後會得到一個 Log file，副檔名是 etl，像是這樣</p><p><img src="https://i.imgur.com/bA7cvXl.jpg" alt=""></p><p>如果有裝 Windows Performance Analyzer，就可以打開來看。圖中是收 TCP/IP 的 Event。</p><p><img src="https://i.imgur.com/B6GuX7z.jpg" alt=""></p><p>以上便是最簡單的 ETW 使用方式，在 Windows 收 Event 還有很多不同的做法，有機會再與大家分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為工作需求，開始接觸 Windows System Programming，每次都覺得 MSDN 寫的很混亂，有時候太注重細節，對於系統沒有全面性的介紹；有時又只有概論，沒有程式碼或實作內容；有些甚至把不同的文件連結在一起就結束了。即使是 Google 找到的資料也比日本製的壓縮機還稀少。最後只能花時間慢慢測試，聽部門的人說，有好幾次都是他們自己試出很 tricky 的用法，跟微軟的技術人員聊一聊，結果居然變成 MSDN 的內容，不知道該哭還是笑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用WinDBG掛VMware</title>
    <link href="https://bclin.tw/2020/05/17/attach-windbg-on-vmware/"/>
    <id>https://bclin.tw/2020/05/17/attach-windbg-on-vmware/</id>
    <published>2020-05-17T15:07:58.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Steps"   >          <a href="#Steps" class="heading-link"><i class="fas fa-link"></i></a><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1>      <ol><li>Install a Windows System in VMWare</li><li>Delete the Printer and add a new Serial Port<br><img src="https://i.imgur.com/Ir7IidC.jpg" alt=""></li><li>Add a shortcut of WinDBG.</li></ol><ul><li>Edit the target to C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\windbg.exe” -k com:port=.\pipe\com_1,baud=115200,pipe</li><li>Run as Administrator</li></ul><ol start="4"><li>Open GuestOS in VMWare, open CMD as Administrator</li></ol><ul><li>The {ID} is generated by second command<ul><li>bcdedit /dbgsettings serial baudrate:115200 debugport:1</li><li>bcdedit /copy {current} /d DebugEntry</li><li>bcdedit /displayorder {current} {ID}</li><li>bbcdedit /debug {ID} ON</li></ul></li></ul><ol start="5"><li>Restart the virtual machine and choose the DebugEntry.</li><li>Run the WinDBG in the starting process of virtual machine.</li></ol>]]></content>
    
    <summary type="html">
    
      
        &lt;h1 id=&quot;Steps&quot;&gt;
          &lt;a href=&quot;#Steps&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#Steps&quot; class=&quot;headerlink&quot; title=&quot;Steps&quot;&gt;&lt;/a&gt;Steps&lt;/h1&gt;
      &lt;ol&gt;
&lt;li&gt;Install a Windows System in VMWare&lt;/li&gt;
&lt;li&gt;Delete the Printer and add a new Serial Port&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/Ir7IidC.jpg&quot; alt&gt;&lt;/li&gt;
&lt;li&gt;Add a shortcut of WinDBG.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Edit the target to C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\windbg.exe” -k com:port=.\pipe\com_1,baud=115200,pipe&lt;/li&gt;
&lt;li&gt;Run as Administrator&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Open GuestOS in VMWare, open CMD as Administrator&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The {ID} is generated by second command&lt;ul&gt;
&lt;li&gt;bcdedit /dbgsettings serial baudrate:115200 debugport:1&lt;/li&gt;
&lt;li&gt;bcdedit /copy {current} /d DebugEntry&lt;/li&gt;
&lt;li&gt;bcdedit /displayorder {current} {ID}&lt;/li&gt;
&lt;li&gt;bbcdedit /debug {ID} ON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>如何實作一個 aligned_alloc() ？</title>
    <link href="https://bclin.tw/2020/03/15/aligned-malloc/"/>
    <id>https://bclin.tw/2020/03/15/aligned-malloc/</id>
    <published>2020-03-15T17:05:38.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>因為面試被問到，所以就稍微研究了一下。</p><a id="more"></a>        <h1 id="What-is-aligned-alloc"   >          <a href="#What-is-aligned-alloc" class="heading-link"><i class="fas fa-link"></i></a><a href="#What-is-aligned-alloc" class="headerlink" title="What is aligned_alloc() ?"></a>What is aligned_alloc() ?</h1>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">aligned_alloc</span><span class="params">( <span class="keyword">size_t</span> alignment, <span class="keyword">size_t</span> size )</span></span>;</span><br></pre></td></tr></table></div></figure><p>根據 cppreference，aligned_alloc() 是分配 size 位元組未初始化的存儲空間，按照 alignment 指定對齊。size 參數必須是 alignment 的整數倍。 </p>        <h1 id="Implementation"   >          <a href="#Implementation" class="heading-link"><i class="fas fa-link"></i></a><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1>      <p>我們先用 malloc 向系統要一塊空間，但 malloc 給出來的並不是對齊的，所以一開始使用 malloc 時，要多要一點空間，確保就算偏移很多也是可以對齊。<br>一開始先要一塊空間，是 目標大小 + 對齊的量 + 一個size_t的大小。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p1;</span><br><span class="line">p1 = (<span class="keyword">void</span> *) <span class="built_in">malloc</span>(bytes + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>))</span><br></pre></td></tr></table></div></figure><p>設想一個簡單的情況，我們要 16 Bytes 的空間以 16 Bytes 對齊，運氣好的話一開始就對齊了，運氣不好，可能偏移了 15 Bytes，我們需要額外的空間做對齊。<br>這時我們把 molloc 給我們的 address 加上偏移量與 size_t 的大小，確保我們 shift 過一個 alignment block。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> addr = (<span class="keyword">size_t</span>) p1 + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);</span><br></pre></td></tr></table></div></figure><p>接著把這個 address 跟偏移量做 mod 運算，取得實際偏移量，再用 address 減去偏移量，把指標往回挪，藉此得出對齊後的位址。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p2;</span><br><span class="line">p2 = (<span class="keyword">void</span>*)(addr - (addr % alignment));</span><br></pre></td></tr></table></div></figure><p>但是，free 時我們必須用 malloc 給的記憶體位址才能把整塊都 free 掉。所以我們必須保留 p1 的記憶體位址，怎麼做呢？我們剛剛多要了一塊 size_t 的大小，於是我們把 p2（對齊的位址）往前一個 size_t 大小的位址，塞入了 p1 的位址。這樣我們之後 free 時只要呼叫這個位址，就可以 free 整塊 malloc 給我們的空間。</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((<span class="keyword">size_t</span>*)p2 - <span class="number">1</span>) = (<span class="keyword">size_t</span>)p1;</span><br></pre></td></tr></table></div></figure>        <h1 id="Code"   >          <a href="#Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#Code" class="headerlink" title="Code"></a>Code</h1>      <figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">aligned_malloc</span><span class="params">(<span class="keyword">size_t</span> bytes, <span class="keyword">size_t</span> alignment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p1 ,*p2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((p1 = (<span class="keyword">void</span>*) <span class="built_in">malloc</span>(bytes + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">size_t</span> addr = (<span class="keyword">size_t</span>) p1 + alignment + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);</span><br><span class="line">    p2 = (<span class="keyword">void</span>*)(addr - (addr % alignment));</span><br><span class="line"></span><br><span class="line">    *((<span class="keyword">size_t</span>*)p2 - <span class="number">1</span>) = (<span class="keyword">size_t</span>)p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aligned_free</span><span class="params">(<span class="keyword">void</span> *p )</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span>*)(*((<span class="keyword">size_t</span>*) p - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = (<span class="keyword">int</span>*)aligned_malloc(<span class="number">1024</span>,<span class="number">12</span>);</span><br><span class="line">    aligned_free((<span class="keyword">void</span>*)ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為面試被問到，所以就稍微研究了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="軟體研討" scheme="https://bclin.tw/categories/%E8%BB%9F%E9%AB%94%E7%A0%94%E8%A8%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>荒謬的具現化，讀卡繆的《鼠疫》</title>
    <link href="https://bclin.tw/2020/02/16/the-plague/"/>
    <id>https://bclin.tw/2020/02/16/the-plague/</id>
    <published>2020-02-16T19:10:00.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="前言"   >          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h1>      <p>近來武漢肺炎一事沸沸揚揚，時至今日，我們依然奮力地抵抗病毒給人類帶來的死亡，卻也依然讓它帶走了許多無辜的生命。在歷史上，人類與疾病的戰鬥從未停止過，而病菌同時也是文明發展的關鍵因素之一。在這樣的防疫時刻，閱讀卡繆的《鼠疫》再應景不過了。</p><a id="more"></a><p>讀完《薛西弗斯的神話》後，對於卡繆所有的作品，都有了不同層次的理解。《鼠疫》一書也是一樣，表面上是一個城市遭受瘟疫侵襲而封城，醫師與志願者們進行公共衛生措施與宣導的故事，實際上卻是每個人在面臨瘟疫時，在生活中對抗荒謬的過程。</p>        <h1 id="瘟疫於個人的意義"   >          <a href="#瘟疫於個人的意義" class="heading-link"><i class="fas fa-link"></i></a><a href="#瘟疫於個人的意義" class="headerlink" title="瘟疫於個人的意義"></a>瘟疫於個人的意義</h1>      <p>在瘟疫來襲的過程中，每個人都表現出其獨特的一面。所有人一開始都不以為意，直到開始出現大量死者，市民和政府才驚覺重要性，並實施封城。封城與瘟疫帶給市民各不相同的影響，城市漸漸死寂，有些人找到了棲身之所，有些人則因失去希望而漸漸情感麻痺。卡繆正是從這裡帶入了他的哲學，瘟疫是什麼？瘟疫本身即是生活，是一切。這種普遍存在於生命中的無可戰勝的力量，即是荒繆的隱喻。</p><p>在書中，卡繆對於宗教的描述占了相當一部分的敘述。人類在面對絕望、自我的軟弱時，常尋求超然力量的協助與慰藉，宗教因而在瘟疫侵襲的市民生活中佔了一席之地。從宗教的角度來說，瘟疫是天譴，是神對人類的懲罰。那些因瘟疫而死的人，恰恰是一種贖罪，死亡讓他們得以解脫。然而，李厄醫師並不同意宗教的說法：</p><blockquote><p>「我至死也不會去愛這個使孩子們慘遭折磨的上帝的創造物。」</p></blockquote><p>主角李厄身為一名醫生，在瘟疫初期擔任了類似吹哨人的角色。李厄為了對抗瘟疫而身心憔悴，逐漸地在面對死亡時失去了情感。在醫生眼中，因疾病死亡的人是失敗的代表。不斷上升的死亡人數，在李厄眼裡即是永無止境的失敗。即使如此，李厄還是不斷地進行防疫工作，甚至成立了防疫小組，負責城市的公共衛生與防疫工作。在組建小組前，他與塔盧有一段對話：</p><blockquote><p>塔盧附和道：「是啊，我可以理解。但你的勝利永遠都只會是暫時的，就這麼簡單。」<br>李厄似乎沉下了臉。<br>「是永遠沒錯，但不能因為這樣就不再奮鬥。」<br>「對，這不是理由，但我現在可以想像這場瘟疫對你應該具有特別的意義。<br>李厄說：「是的，這是一場永無止境的失敗。」</p></blockquote><p>對於塔盧來說，這些都無關緊要，進行防疫、拯救生命為的是求得個人內心的平靜。他的思想，源自於年少時對父親工作的憧憬與失落的巨大落差，並意識到自己是死亡的間接執行者，所有死刑犯之死，自己都有責任。因而對李厄醫師說：「我於是明白了，這麼多年來雖然全心全意地認為自己在對抗著瘟疫，卻始終是個瘟疫患者。」<br>這句話暗示了之後塔盧的死亡命運，然而直到最後我們也無法得知塔盧是否得到內心的平靜。</p><p><img src="https://i.imgur.com/Or1uaR1.jpg" alt=""></p>        <h1 id="瘟疫與荒謬"   >          <a href="#瘟疫與荒謬" class="heading-link"><i class="fas fa-link"></i></a><a href="#瘟疫與荒謬" class="headerlink" title="瘟疫與荒謬"></a>瘟疫與荒謬</h1>      <p>即使是永無止境的失敗，也要不斷奮鬥，對抗瘟疫這股荒謬的力量。如同薛西弗斯，即使石頭終將滾回地面，他依然不懈地推動巨石，並在過程中取得了勝利。</p><p>卡繆在《薛西弗斯的神話》中寫道：</p><blockquote><p>「假如這則神話是個悲劇，那是因為它的主角是有意識的。…今日的工人們天天坐著相同的工作，持續一輩子一樣的命運並不會比較不荒謬。但是唯有在那罕見的有意識的時刻，它才是悲劇性的。薛西弗斯這個眾神底下的勞動者既無能為力卻又有反抗之心，他明白自己的不幸境遇；這正是他走下山時在思考的問題。清醒與明智導致了他的苦痛，卻同時讓他取得了勝利。沒有什麼命運是不能被輕蔑所戰勝的。」 </p></blockquote><p>我們就像是在瘟疫死神底下的受害者，瘟疫揮舞著巨鞭找尋下一個受害者，而我們能做的就是等待瘟疫過去，或是死亡。這是一種荒謬，也是李厄等人想反抗的命運。而到了最後，瘟疫過去，每個人都找尋到自己關於荒謬的解釋與答案。如同牧師在生病後死亡，也因他亟欲反抗「牧師看醫生」這件事情，而使得病徵「似瘟疫又非瘟疫」，這正證明了他的反抗並非沒有意義的。對每個人來說，其荒謬具現化在生命中的形式各不相同，或許無法永遠的戰勝荒謬，然而只要輕蔑命運，便也不會是永無止境的失敗。奮鬥本身就是勝利。</p>        <h1 id="節錄："   >          <a href="#節錄：" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄：" class="headerlink" title="節錄："></a>節錄：</h1>      <ul><li><p>他們自以為自由，但只要有疫災，誰都不可能自由 - p.50</p></li><li><p>打仗的時候，我們幾乎不知道什麼叫亡者。既然得親眼見到某人死亡，這個死去的人才有重量，那麼這些散布再歷史當中的一億具屍體，不過就是想像中的一縷煙罷了。 - p.50</p></li><li><p>一顆焦慮的心最大的渴望就是永不止息地擁有心愛的人，否則也希望自己不在的時候，能把對方丟入吳孟的睡眠中，直到兩人重聚的那一天為止。 - p.103</p></li><li><p>塔盧附和道：「是啊，我可以理解。但你的勝利永遠都只會是暫時的，就這麼簡單。」</p><p>  李厄似乎沉下了臉。</p><p>  「是永遠沒錯，但不能因為這樣就不再奮鬥。」</p><p>  「對，這不是理由，但我現在可以想像這場瘟疫對你應該具有特別的意義。</p><p>  李厄說：「是的，這是一場永無止境的失敗。」 - p.116</p></li><li><p>世上的惡幾乎都來自於無知，而善意假如未加以闡明，也可能和惡性一樣造成重大傷害。 - p.119</p></li><li><p>習慣於絕望比絕望本身更慘。</p></li><li><p>我於是明白了，這麼多年來雖然全心全意地認為自己在對抗著瘟疫，卻始終是個瘟疫患者。 - p.210</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;   &gt;
          &lt;a href=&quot;#前言&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
      &lt;p&gt;近來武漢肺炎一事沸沸揚揚，時至今日，我們依然奮力地抵抗病毒給人類帶來的死亡，卻也依然讓它帶走了許多無辜的生命。在歷史上，人類與疾病的戰鬥從未停止過，而病菌同時也是文明發展的關鍵因素之一。在這樣的防疫時刻，閱讀卡繆的《鼠疫》再應景不過了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>老了以後，一切都不配。閱王定國《神來的時候》</title>
    <link href="https://bclin.tw/2020/01/22/%E7%A5%9E%E4%BE%86%E7%9A%84%E6%99%82%E5%80%99/"/>
    <id>https://bclin.tw/2020/01/22/神來的時候/</id>
    <published>2020-01-22T20:18:50.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://i.imgur.com/ZeBCtN8.jpg" alt=""></p><p>王定國用這七篇短篇述說著，我們活著所追求的不過是心安而已。</p><!-- more --><p>人生路崎嶇，我們顛簸而行，心難安定。於是，愛情或親情所帶來的孤寂與傷痕，在年老後轉變成一個個深夜的噩夢，使我們黑夜中驚醒。有些年輕時不以為意的傷害，隨著時間卻令我們愈發不安。<br>《神來的時候》裡的每一個故事都是在彌補過去的錯誤，有的成功彌補，有的卻遺憾終身，餘生只得被悲傷包圍著度過。</p><p>老了，會對多少事物感到不配呢？《生之半途》的經理，即使暗戀公司中的陳小姐，也因害怕自己不配而無法訴說情意。卻在午休時盯著她的面容，在夢裡看著她的身體，並悲傷地說出「如果妳肯愛我，我願意答應不要活太久。」</p><p>老了，是否能彌補年輕時的遺憾？《螢火蟲》中的杏支，無論如何都要見修平教授一面，只為了兒時的情愫未了。《神來的時候》中，叔叔為了年輕時的失敗戀情，自甘墮落後又浪子回頭。</p><p>這七篇故事裡的人物，各自帶著不同的孤寂相遇、分手。王定國在每一篇故事都刻劃了一名偉大的女人。在逆境中求生，在世界背棄自己時努力活著。她們為了彌補年輕時的傷痛或守護誓言，甚至是對愛的信仰，而等待永恆與奇蹟的到來。雖只是小人物，卻綻放了希望的光芒。文明的無情帶給他們絕望，卻也使他們靈魂的苦痛得到昇華。</p><p>每次閱讀王定國的小說，總是被他的細膩筆觸所刺痛，卻又深受感動。就像之前我說過的，那是一種無言的強烈窒息，濕了眼眶卻無法痛哭的悲哀。每一篇故事都非常精煉，冷靜地描繪出小人物生命的交織。閱讀時不禁想，自己是否也會經歷這些顛簸、活出這些惆悵？若我也變成故事中的人物，豈不悲哀？每思及此，悲不自勝。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>有愛才麻煩，有人就是因為曾經愛得太深才會一去不回。沒有愛就沒有苦，頂多像我現在的心這樣空蕩蕩，活著雖然就像死了，至少還能空蕩蕩地活著。  - p.36</p></li><li><p>畢竟被需要與被愛不同，被需要是一種活下去的價值，反而愛或不愛才會使人想死。 - p.40</p></li><li><p>男人的愛一旦曾經被糟蹋，他很可能就會在那種傷痛中度過殘生，而不是再去糟蹋他所不愛的女人。 - p.41</p></li><li><p>沒經歷過辛酸的女人不可能會在老後變得那樣慈祥。 - p.46</p></li><li><p>當我們想要盡全力愛一個人時，我們甚至連最卑微的也會奉獻出來。 - p.55</p></li><li><p>穿不穿襪子本來就是無關於苦難的，然而人生的苦難往往就是留下最小的象徵而成為永遠的傷痕。 - p.62</p></li><li><p>當我們承受著自己的困境時，多少還有一點餘力去關懷別人，然而一旦自己也成為了悲哀的別人，除了感傷還有什麼心情去聆聽。 - p.85</p></li><li><p>如果妳肯愛我，我願意答應不要活太久。 - p.109</p></li><li><p>啊，為什麼，人生多少困境不就因為這樣那樣的為什麼。 - p.130</p></li><li><p>他並不認為重來後的生命就能改變家庭，畢竟在那重來的家庭裡，原有的幸福還是會分配在本來的位置，而他到時候可能還是一樣現在的自己。 - p.130</p></li><li><p>一個女人不論她多天真或是多絕望，她總想要知道自己是被拋棄還是被徹底忘記。被拋棄是愛的失敗，被忘記則是愛的徒勞。 - p.176</p></li><li><p>我最大的不幸就是一直想要成為有用的人，結果到頭來反而更沒用。 - p.245</p></li><li><p>我想這或許就是溫暖的晨光所賜，使我頓悟到文學之所以必要，就是為了照亮我們每個小靈魂的苦痛和希望。 - p.258</p></li><li><p>若我能用文字裡的安靜和你緊靠心靈，我想，這就可以了，文學的憧憬不就是這樣而已的嗎？卻已足以用來面對各種文明背後的無情。 - p.258</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZeBCtN8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;王定國用這七篇短篇述說著，我們活著所追求的不過是心安而已。&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;人生路崎嶇，我們顛
      
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>現代公民非得依靠政黨選邊站？</title>
    <link href="https://bclin.tw/2019/12/24/election-labels/"/>
    <id>https://bclin.tw/2019/12/24/election-labels/</id>
    <published>2019-12-24T16:27:50.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>不知不覺已屆 2019 年底，離 2020 總統大選不遠了，根據這幾年的經驗，越接近選舉，身邊的人就會越狂熱。然而，這種狂熱並不會表現在政策討論上，而是以近似於獵巫的形式來展現。每個人似乎都無法接受同溫層中出了一個異端。沒錯，我就是每兩年被抓出來的那個異端。從 2014 年的太陽花學運開始，我就一直扮演著這樣的角色。但最近實在是有點誇張了。</p><a id="more"></a>        <h1 id="人總是習慣二分法"   >          <a href="#人總是習慣二分法" class="heading-link"><i class="fas fa-link"></i></a><a href="#人總是習慣二分法" class="headerlink" title="人總是習慣二分法"></a>人總是習慣二分法</h1>      <p>會掉落二分陷阱並不是你的錯，我們或多或少都在不同狀況下掉進這個思維陷阱。即使人類建立了龐大且輝煌的文明，基因裡卻還保留著許多原始的本能。這些古老的習慣幫助我們在許多時候變得有效率，卻也讓我們在複雜的現代議題前變得無力。要克服這些思維陷阱，除了需要思想上的突破外，還需要建立思考的習慣。然而思考是相當反人性的一件事情，甚至會消耗大量的能量，也因此大多現代人不約而同地選擇放棄了高級思考的能力。</p>        <h2 id="選擇立場是一種智力的展現嗎？"   >          <a href="#選擇立場是一種智力的展現嗎？" class="heading-link"><i class="fas fa-link"></i></a><a href="#選擇立場是一種智力的展現嗎？" class="headerlink" title="選擇立場是一種智力的展現嗎？"></a>選擇立場是一種智力的展現嗎？</h2>      <p>以台灣政治的現況來說，兩黨制很大一部份促使了二分思維在人民心中根深柢固。當一個人表現出「反A」的傾向時，其他人很容易就認為這個人會「支持B」。因為對大多數人民來說，只有這兩個政黨有能力解決問題，甚至他們可能只認識這兩個政黨，對於其他小黨要不是不屑一顧，就是根本不知道有小黨的存在。</p><p>舉個例子，為什麼很多軍公教支持國民黨？其一是因為退休金被民進黨砍了，而因此討厭民進黨去支持國民黨（二分）；其二則是因為國民黨承諾會修法補回這些退休俸（利益）。</p><p>所以說，在兩黨中選一邊來站，真的是智力的展現嗎？並不然。<br>我常常在網路上看見許多用智力來侮辱對方的貼文，但其實選擇立場跟個人的深度並沒有絕對關係，而是跟個人的「利益」或「理念」有關。無論政黨或議題本身，其支持者都會有較具深度的人，也都有較思考能力較差的人（而且是大部分人），所以用選擇立場來評判智力是完全不對，而且是很侮辱自己智力的一種說法，這也是我很討厭這種說法的原因。一個人若因為害怕智力測驗沒過，而選擇抄別人的答案，不就正暴露出了他的智力不足嗎？</p>        <h2 id="立場是為了要激盪不同想法"   >          <a href="#立場是為了要激盪不同想法" class="heading-link"><i class="fas fa-link"></i></a><a href="#立場是為了要激盪不同想法" class="headerlink" title="立場是為了要激盪不同想法"></a>立場是為了要激盪不同想法</h2>      <p>不同的立場之所以需要存在，是因為我們需要透過不同的思維相互碰撞來得出更好的答案。我們並非完人，個人的思考都會有盲點，要克服思維上的盲區，需要透過與不同想法的人討論。若窩在同溫層和自己立場相同的人相互取暖，只會因此更無法接受其他想法的存在，最後成為頑固老人。</p>        <h2 id="議題和政黨的關係"   >          <a href="#議題和政黨的關係" class="heading-link"><i class="fas fa-link"></i></a><a href="#議題和政黨的關係" class="headerlink" title="議題和政黨的關係"></a>議題和政黨的關係</h2>      <p>在這個時代，社會議題的複雜程度前所未見，難以用對錯來二分。核能存續、同性戀婚姻、死刑存廢、安樂死存廢 … 我們每天面對這些沒有絕對正確與錯誤的議題，需要先花許多力氣理解議題內容，再透過大量的資料閱讀來做出選擇。然而，現代人有一個更輕鬆的方法：支持一個政黨，繼而支持這個政黨對議題的立場。</p><p>支持議題繼而支持政黨，與支持政黨而支持議題是完全不同的兩回事。</p><p>先支持議題而支持政黨，意味著你對議題有一定的理解，並且知道要透過誰去才能實現這個理想；支持政黨而支持議題，就只是意識型態作祟而已。</p>        <h1 id="所以說我是誰？"   >          <a href="#所以說我是誰？" class="heading-link"><i class="fas fa-link"></i></a><a href="#所以說我是誰？" class="headerlink" title="所以說我是誰？"></a>所以說我是誰？</h1>      <p>會寫這篇文章，也是覺得身邊的人對我誤會頗深。我通常喜歡在別人面前講他們不愛聽的話，所以常會說「你這個被國民黨洗腦的」「你這個一定是民進黨…」。<br>我很單純地只是針對不同議題有不同見解，對於能源議題，根據我唸過的書，核能在短期內是必須的。我卻很常因此被朋友或親戚說支持韓國瑜、國民黨。當我支持香港反送中、支持同性婚姻時，也曾被家人說我是被民進黨洗腦。</p><p>我只是單純地去支持我認為對的事情，大家卻不斷地往我身上貼標籤，「國民黨」、「民進黨」、「柯黑」、「中共同路人」。<br>基本上就是你們這些人太堅持自己的立場，不願意聽別人說話，才會聽到難聽話自己惱羞成怒。我不是那種因為你支持國民黨，所以在你面前說核能好棒棒；因為你支持民進黨，所以在你面前說同婚好棒棒、綠能好棒棒。我是那種知道你支持柯文哲，我就在你面前說柯文哲的公共住宅政見跳票，而且他發言很仇女；我知道你支持民進黨，我就會在你面前說強推礦業法跟潮間帶蓋風電真的很厲害。</p><p>因為如果你如果不知道我在說什麼，或是事後生氣中傷我，那就證明你一點政治素養也沒有。而身為一個現代公民，這點素養應該是基本的吧？</p><p>但很多人做不到，就像是呱吉在臉書（ <span class="exturl"><a class="exturl__link"   href="https://www.facebook.com/gameimp/posts/10157757198629641"  target="_blank" rel="noopener">https://www.facebook.com/gameimp/posts/10157757198629641</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ） 說自己雖然和侯漢廷的立場不同，但侯很有禮貌，討論議題也是互相尊重。卻被一堆台派群起而攻之，這就是不懂的尊重彼此差異。</p><p>即使侯漢廷明顯是國民黨，但看過侯漢廷在議會質詢柯文哲的表現，難道你應該因為黨派而唾棄他嗎？即使不喜歡柯文哲，但柯文哲在面對質詢時，勇於承認自己政策施行不當，難道我們不應該給予肯定嗎？</p>        <h1 id="結論"   >          <a href="#結論" class="heading-link"><i class="fas fa-link"></i></a><a href="#結論" class="headerlink" title="結論"></a>結論</h1>      <p>我不一定是對的，我也無法肯定我是對的，有時候一個議題的對錯界線是如此模糊，我無法有效地判斷應該怎麼做。<br>但至少我可以根據手邊的資料，思考後提出質疑，如果你真的認為自己支持的議題是對的，就應該想辦法說服我，而不是將我打入敵對陣營。<br>我唯一可以肯定的是，如果你無法回答我的問題，解決我的疑慮，那你對自己正在做的事情、自己選擇立場的原因，甚至於根本上的理念，是全然不理解的。<br>真正沒過智力測驗的，就是你這種人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不覺已屆 2019 年底，離 2020 總統大選不遠了，根據這幾年的經驗，越接近選舉，身邊的人就會越狂熱。然而，這種狂熱並不會表現在政策討論上，而是以近似於獵巫的形式來展現。每個人似乎都無法接受同溫層中出了一個異端。沒錯，我就是每兩年被抓出來的那個異端。從 2014 年的太陽花學運開始，我就一直扮演著這樣的角色。但最近實在是有點誇張了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>做研究，僅僅有興趣夠嗎？</title>
    <link href="https://bclin.tw/2019/11/24/Intrested-and-Passionate/"/>
    <id>https://bclin.tw/2019/11/24/Intrested-and-Passionate/</id>
    <published>2019-11-24T00:20:00.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在思考一件事情，就是做研究，僅僅有興趣是足夠的嗎？<br>會思考這件事情，得從為什麼我選擇做神經網路的測試方法說起。</p><a id="more"></a>        <h1 id="我的夢想"   >          <a href="#我的夢想" class="heading-link"><i class="fas fa-link"></i></a><a href="#我的夢想" class="headerlink" title="我的夢想"></a>我的夢想</h1>      <p>之前談 MIT 的時候，我曾說過我的夢想是當一名科學家。可能是科幻作品的影響，我從小就想做一些有「智慧」的東西。<br>《Portal》裡的 GLaDOS、《2001太空漫遊》的 Hal 9000、《Pluto》裡的未來機器人世界令我深深著迷。</p><p>但很早我就認清了事實並放棄這個夢想，因為至少半世紀內，這種 Artificial Intelligence (AI) 不太可能實現。原因很簡單，要製作出真正的「智慧」，不僅僅需要電腦科學領域的努力，還得仰賴諸如哲學、物理學、神經科學、腦科學、生化、生科等許多領域的極大突破。</p><p>Deep Learning 大放異彩之後，我心中燃起一線希望，這項讓電腦在圍棋上打敗人類的技術，引起我極大的興趣。雖然知道現階段的應用還離夢想很遠，但我還是去學習了相關領域的知識。</p><p>在做研究的過程中，寫程式、寫算式、訓練模型確實是很有趣，但這個 Deep Neural Network 顯然不是我要的。會意識到這件事情，還是跟女友在聊書的時候發現的。我發現我其實對腦科學和神經科學很有興趣，也常買相關的書，但就只是興趣而已，跟對 Deep Learning 的興趣是一樣的。我沒辦法再做更多。</p>        <h1 id="做研究"   >          <a href="#做研究" class="heading-link"><i class="fas fa-link"></i></a><a href="#做研究" class="headerlink" title="做研究"></a>做研究</h1>      <p>若要談論興趣，在 Computer Science 的領域中，我對於 Security 的興趣還是比較濃厚的，從小也對做一名 Hacker 有深深的嚮往。</p><p>在這幾個月做研究的過程中，我發現，對於做神經網路的研究，我居然是這麼沒有熱忱。雖然寫程式的時候覺得很好玩，但對其他的一切卻很麻木，沒有感覺，甚至有些厭煩。在寫這篇論文前，Wesley 要我思考做研究的過程中，最喜歡的和最不喜歡的，並且評價自己適不適合做研究。其實做研究的難點還是在保持初心，做著做著容易忘記自己在做什麼。對於神經網路，我缺乏最後一步的熱忱，讓我興奮的，都是思索如何能把測試和安全用在神經網路上，而不是思索神經網路缺陷的本質。</p><p>於是我發現，原來一樣是興趣，也是有分高低的。要做研究，僅僅是有興趣是不行的，還必須有熱忱。</p><p>當初會選擇做這個題目，也是希望把 Cyber Security 跟 AI 這兩個興趣做結合，結果到了年中，我開始想把重心轉往 Fuzz Testing，做程式分析和測試顯然更加乏味卻也更加有趣。不過，這個題目確實是很新穎的，指導教授興奮，我也興奮，所以還是繼續做下去，畢竟對我來說，寫這些程式並不需要花多少時間和心力。</p>        <h1 id="軟體測試與神經網路"   >          <a href="#軟體測試與神經網路" class="heading-link"><i class="fas fa-link"></i></a><a href="#軟體測試與神經網路" class="headerlink" title="軟體測試與神經網路"></a>軟體測試與神經網路</h1>      <p>結果這個研究領域才過一兩年就飽和了。<br>看了近兩年關於 Testing Neural Networks 的論文，基本上都沒有太大的變化，實用性也都還很低。看了這麼多，其實除了 Pei et al.[1] 的 DeepXplore、Tian et al.[2] 的 DeepTest 跟 Katz et al.[3] 的 Reluplex 是真的把測試和驗證帶入神經網路的領域，大多只是把傳統軟體的那套搬來用，蹭熱度趕快刷刷論文而已，少有觸及到神經網路本質之作。</p><p>比如 Gopinath et al.[4], Sun et al.[5] 就是把 Symbolic 跟 Concolic 的概念套上去，而 Guo et al.[6]、Ma et al.[7] 還有 Xie et al.[8] 都是從傳統 Fuzzing 的角度出發，提出 Coverage 的概念，並把 Coverage-Guided Fuzzing 那套拿來用。方向是正確的，但實用性其實沒那麼高。畢竟你一樣拿出 FGSM，epsilon 調到超高，Misclassification Rate 大概也接近 100% 了，哪裡還需要什麼 Coverage-Guided 呢？</p><p>我們做自動化測試、模糊測試就是為了要找到軟體的問題，要能夠 Validate 和 Verify 軟體，但 Deep Learning 就像上個世紀剛發展的軟體產業一般，漏洞百出。<br>試想，上個世紀末 Barton Miller 教授提出 Fuzz Testing 的概念時，那些 Unix 的軟體不也是漏洞百出，只要用一些隨機字串就能使重要的 API 或程式崩潰。三十年後，即使是廣為人知的 AFL 以及其延伸出的 Fuzzer 都未必能輕易地找到程式的漏洞。</p><p>可以說，我認為軟體測試和軟體的發展是相輔相成的，在神經網路還未成熟以前，軟體測試很快便走到了瓶頸。體認到這個事實的我，還是回去做資安好了。況且，人的一生要做好一件事情就已經很吃力了。</p>        <h1 id="結語"   >          <a href="#結語" class="heading-link"><i class="fas fa-link"></i></a><a href="#結語" class="headerlink" title="結語"></a>結語</h1>      <p>做了一次研究，發現又更了解了自己一點。如同 Wesley 所說，做學術研究，有很大一部分是對自己的內宇宙進行挖掘與探索。<br>它讓我知道，僅僅有興趣是不足以做研究的，若沒有激情和熱忱，以及對於自己充分的了解，研究不過是譁眾取寵，或是痛苦的深淵罷了，終究只能產出一堆廢紙。</p>        <h1 id="Reference"   >          <a href="#Reference" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>      <p>[1] Kexin Pei, Yinzhi Cao, Junfeng Yang and Suman Jana, “DeepXplore: Automated Whitebox Testing of Deep Learning Systems,” ACM Symposium on Operating Systems Principles (SOSP) 2017.<br>[2] Yuchi Tian, Kexin Pei, Suman Jana and Baishakhi Ray, “DeepTest: Automated Testing of Deep-Neural-Network-driven Autonomous Cars,” ACM/IEEE International Conference on Software Engineering (ICSE) 2018.<br>[3] Guy Katz, Clark Barrett, David Dill, Kyle Julian and Mykel Kochenderfer, “Reluplex: An Efficient SMT Solver for VerifyingDeep Neural Networks,” Computer Aided Verification (CAV) 2017.<br>[4] Divya Gopinath, Kaiyuan Wang, Mengshi Zhang, Corina S. Pasareanu and Sarfraz Khurshid, “Symbolic Execution for Deep Neural Networks,”      arXiv:1807.10439 [cs.SE].<br>[5] Youcheng Sun, Xiaowei Huang, Daniel Kroening, James Sharp, Matthew Hill and Rob Ashmore, “DeepConcolic: Testing and Debugging Deep Neural Networks,” International Conference on Software Engineering (ICSE) 2019.<br>[6] Jianmin Guo, Yu Jiang, Yue Zhao, Quan Chen and Jiaguang Sun, “DLFuzz: Differential Fuzzing Testing of Deep Learning Systems,” ESEC/FSE’2018.<br>[7] Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao and Yadong Wang, “DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems,” IEEE/ACM International Conference on Automated Software Engineering (ASE 2018).<br>[8] Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin and Simon See, “DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing,” arXiv:1809.01266 [cs.SE].</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在思考一件事情，就是做研究，僅僅有興趣是足夠的嗎？&lt;br&gt;會思考這件事情，得從為什麼我選擇做神經網路的測試方法說起。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>新的網站</title>
    <link href="https://bclin.tw/2019/10/26/new-blog-2019-10/"/>
    <id>https://bclin.tw/2019/10/26/new-blog-2019-10/</id>
    <published>2019-10-26T13:57:50.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>好幾年沒有更新部落格的版面了，這幾天卻突然有強烈的慾望來做這件事情。主要是仲軒幫實驗室換網站，我建議乾脆直接用 Hexo，方便使用，自己也乾脆來整理自己的網站。掃去了舊伺服器和系統上的蜘蛛網，順便接觸新技術，就像是我的人也脫胎換骨一般清爽。</p><a id="more"></a><p>這次把部落格從原來的 WordPress 轉到 Hexo 有幾個原因</p><ol><li>WordPress 太肥</li></ol><p>WP 系統雖然方便，資源也很多，但實在有很多我用不到的功能，我只需要寫寫文章的功能就好。WP 對我來說就像是一把牛刀，我平常用不到。</p><ol start="2"><li>伺服器</li></ol><p>用 WP 的時候，我需要租一台主機來用，原來放在 DigitalOcean 上，雖然不是太貴（USD$5/month），但總歸還是一筆開銷。<br>另外，Server 管理並非我的強項，一旦遭遇問題，我需要花很多時間排除。更麻煩的是，遭受攻擊時，我的反應能力很差。以前曾經被攻擊過一次，DB 都被清掉，花我很多時間在做 Recover。</p><p>Hexo 因為是靜態，幾乎沒有什麼洞可以利用，放在 GitHub Pages 上，我也不用營運伺服器，搭配 Travis CI 做持續整合，輕鬆。</p><ol start="3"><li>Markdown</li></ol><p>Hexo 是用 Markdown 寫作，再編成 HTML，這樣確保了文章的規格一致。以往用 MCE 最大的問題就是我無法確定我的 字體大小、字型、格式 是否都統一。更要命的是複製其他網站的文字時，可能會不小心把 HTML 也複製進來。排版上也複雜得多。Markdown 完全免除了這些困擾。</p><ol start="4"><li>效能</li></ol><p>靜態頁面不用說，快到飛天。</p><p>當然，也是有缺點的，現在發現最大的問題就是 deploy 實在很慢，尤其是有圖片的時候，在 Travis 上面必須要作 Clean 的動作，意味著沒有快取可以增加部屬的速度。但目前我還可以接受，圖片都外連的情況下，三十篇文章部屬四分鐘左右。<br>另外，我沒有辦法隨時隨地更改網站內容，每一次更改都要 git pull，改完後又 git push，像我有很多台電腦，就變得麻煩一些。</p><p>不過，總歸把自己的部落格作了一番改進，一些老文章也清掉了。</p><p>今年四月後就沒有繼續寫文了，後台裡躺了很多未完成的草稿。其實是不應該這樣的，但就是沒有寫作的心情，明明讀了很多書，也作了很多思考，但遲遲未把這些思想轉化成文字。這是一件危險的事，代表我過度依賴自己的腦袋。</p><p>距離上次發文也半年多了，半年，說起來是很短的時間，卻佔了我碩士生活的三分之一。半年前交往的女友也分手了，半年前曾有交集的女生也斷訊了，半年來發生了太多太多事情。我覺得我變了很多，變得更踏實了一些，也多了點思想上的突破。但我還是難以抓住自己的核心，大學時我以為我可以，研究所時發現都是假象。但為什麼需要抓住自己的核心呢？我也不清楚，只希望能多理解迷一般的自我的潛意識。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好幾年沒有更新部落格的版面了，這幾天卻突然有強烈的慾望來做這件事情。主要是仲軒幫實驗室換網站，我建議乾脆直接用 Hexo，方便使用，自己也乾脆來整理自己的網站。掃去了舊伺服器和系統上的蜘蛛網，順便接觸新技術，就像是我的人也脫胎換骨一般清爽。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常筆記" scheme="https://bclin.tw/categories/%E6%97%A5%E5%B8%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>這個幻想世界是對中國最犀利的批判，談余華《第七天》</title>
    <link href="https://bclin.tw/2019/04/19/the-seventh-day/"/>
    <id>https://bclin.tw/2019/04/19/the-seventh-day/</id>
    <published>2019-04-19T11:52:45.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>《第七天》是余華在 2013 年的長篇作品，我雖不能算是余華迷，但也讀過幾本名作《活著》、《許三觀賣血記》、《在細雨中呼喊》，甚至是一些中短篇 — 帶有實驗小說色彩 — 的作品，像是《現實一種》、《十八歲出門遠行》、《空中爆炸》… 族繁不及備載。在書展看見繁體版的《第七天》，想著一定要看一下這本評價非常兩極的書，便把它帶回家了。</p><a id="more"></a><p>《第七天》描述主角楊飛死後七天所看見的故事，透過死後的視覺所看見的，是充滿情感卻只能袖手旁觀的冷靜。這七天中，楊飛偶爾回想了生前所遇見的種種事件，感覺上像是很嫻熟的意識流技巧；在死後世界所遇見的種種，包括世界本身的這個設定既有趣又富有中國味。</p><p>約翰說：「對任何人都平等的，唯有死而已。」<br>余華則告訴我們：「即使死了也得不到平等，而平等卻在死無葬身之地。」</p><p><img src="https://i.imgur.com/ZqLRNLM.jpg" alt=""></p><p>余華透過一連串發生在主角身邊的事件，來諷刺許多中國現況的荒謬，在生死邊界所看見的那些警察暴力、政治壓迫、金錢消費主義所引起的種種悲劇，蓋住了人性最燦爛光輝的那一面，讓整個世界變得烏煙瘴氣。余華在描寫主角與父親的親情時，至親至情，感人熱淚，有種《活著》和《許三觀賣血記》的影子；描寫起暴力和荒謬，又帶了點《現實一種》和《十八歲出門遠行》的味道，然而諷刺沒有問題，問題在於，敘事的著力點不太平衡。余華花了很大的篇幅在談楊飛與父親是沒有問題的，但最後段把重點放在鼠妹的愛情，稍顯冗餘，讓我讀來感到些許疲憊。</p><p>不難想像那些批評余華的人有何感受，這就像是國家的光鮮亮麗外表被扒開了 — 一個血淋淋的現實 — 任誰都難以忍受。但是，若不能接受自己的荒誕、悲慘以及罪惡，人是不會進步的。在這一點上，余華可謂超越了當代的很多中國人，他筆法犀利得溫暖，從第一次看《許三觀賣血記》時我就這樣感覺到了，余華並非從《第七天》才批評中國，早在他確立到自己長篇小說的風格時，他就不斷寫著那些中國小人物，那些在大時代的洪流下咬牙生存的小人物，並且向他們學習。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第七天》是余華在 2013 年的長篇作品，我雖不能算是余華迷，但也讀過幾本名作《活著》、《許三觀賣血記》、《在細雨中呼喊》，甚至是一些中短篇 — 帶有實驗小說色彩 — 的作品，像是《現實一種》、《十八歲出門遠行》、《空中爆炸》… 族繁不及備載。在書展看見繁體版的《第七天》，想著一定要看一下這本評價非常兩極的書，便把它帶回家了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="余華" scheme="https://bclin.tw/tags/%E4%BD%99%E8%8F%AF/"/>
    
  </entry>
  
  <entry>
    <title>《論文筆記》DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing</title>
    <link href="https://bclin.tw/2019/03/18/paper-deephunter/"/>
    <id>https://bclin.tw/2019/03/18/paper-deephunter/</id>
    <published>2019-03-18T19:30:08.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="論文資訊"   >          <a href="#論文資訊" class="heading-link"><i class="fas fa-link"></i></a><a href="#論文資訊" class="headerlink" title="論文資訊"></a>論文資訊</h1>      <ul><li>標題：DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing </li><li>作者：Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin, Simon See </li><li>機構：Nanyang Technological University、Harbin Institute of Technology、Carnegie Mellon University、University of Illinois at Urbana–Champaign、Kyushu University、NVIDIA AI Technology Center </li><li>會議/期刊：None 連結：<span class="exturl"><a class="exturl__link"   href="https://arxiv.org/abs/1809.01266"  target="_blank" rel="noopener">https://arxiv.org/abs/1809.01266</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   <a id="more"></a>在傳統軟體測試領域，我們很常用一些自動化測試來產生測資並進行測試，進而找出漏洞，最後產生報告供測試人員分析。其中有一種測試方式叫做 Fuzz Testing（Fuzzing），意思就是模糊測試。這篇論文便是以同樣的概念對深度神經網路進行測試，由於作者同時也是 DeepGauge 的研究群，他們引用了自己在 DeepGauge 中提出的神經網路覆蓋率指標，在這邊論文提出了 Coverage-Guided Fuzzing，以程式碼覆蓋率為 feedback 去有效率地產生大量模糊測試的測資。這在傳統軟體測試領域是很常見的策略，像是 AFL、libFuzxer 及 VUzzer 就是 coverage based 的 Fuzzer。<br>基本上，一個 CGF 應該要進行有以下的 Loop：</li></ul><ol><li>從 Seed pool 裡面選擇 seed</li><li>利用特定修改策略（像是bitwise/bytewise flip），多次修改種子去產測資</li><li>用產出來的測資去跑目標程式，紀錄執行路徑</li><li>回報產生錯誤的種子，把那些覆蓋到不同路徑的種子存進 seed pool（提升覆蓋率的種子）</li></ol><p>重點有兩個：修改策略、覆蓋率，前者注重是如何產生新的、有效率的種子，後者則是評斷種子優劣的標準。<br>這是這篇論文提出的 DeepHunter 的流程圖。<br> <a href="https://i.imgur.com/XKDG2DM.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/XKDG2DM.jpg" alt=""></a> </p><p>文中定義一個 atomic 輸入為一個種子，一個 batch 指的則是一堆圖片。為什麼是用 Batch Pool，是因為作者認為一次修改一定數量的種子，然後讓 DNN 一次去做辨識會比較有效率。另外，為了把有「潛力」 的種子往前推，會進行一個 Power scheduling 的動作；為了避免製作出沒有意義的種子，會在修改後進行 Sanity checking。最後進行完 Coverage Analysis 後，會做一個 Batch Prioritization 的動作讓很少被選到修改的 Batch 優先權往前提升。 </p><p><a href="https://imgur.com/RR6SBtO.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/RR6SBtO.jpg" alt=""></a> </p>        <h1 id="3-2-轉換與修改（Transformation-and-Mutation）"   >          <a href="#3-2-轉換與修改（Transformation-and-Mutation）" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-轉換與修改（Transformation-and-Mutation）" class="headerlink" title="3.2 轉換與修改（Transformation and Mutation）"></a>3.2 轉換與修改（Transformation and Mutation）</h1>      <p>傳統 fuzzer 像是 AFL 用的策略產出的測資，對於 DNN 來說會是沒有意義的；而在改動大小和產出有意義測資之間要取得平衡是很難。 所以作者想出了一種圖像變換的策略，稱為 metamorphic mutation strategy，意思就是說，我改動你這個種子，但產生出來的測資的 semantic（語意）必須和原來是一樣的。 對於影像進行變化的方法被分為兩種：</p><ul><li>Pixel Value transformation P<ul><li>對比度</li><li>量度</li><li>模糊</li><li>雜訊</li></ul></li><li>Affine transformation G<ul><li>影像翻譯</li><li>影像縮放</li><li>影像斜變</li><li>影像旋轉</li></ul></li></ul><p>為了避免產出無意義的測資，Affine transformation 只能做一次；Pixel Value transformation 則可以做多次，但會計算 L0 和 L∞ 來限制改變大小。<br>假定 I 透過 pixel value transformation 被改成 I’，那我們說在 f(I,I’) 成立時 I’ 是 有意義的。 </p><p><a href="https://i.imgur.com/31qN9LO.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/31qN9LO.jpg" alt=""></a> </p><p>L0 指的是 pixel 最大改變量，size(I) 則是圖片的 pixel 數量。作者假定如果改動的 pixel 很小，小於 a x size(I) 時語意不受影響。萬一超過了，那只要不要改超過 b x 255 就好了。 </p><p><a href="https://imgur.com/h2kIbh2.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/h2kIbh2.jpg" alt=""></a></p><p><a href="https://imgur.com/gIVr9zN.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/gIVr9zN.jpg" alt=""></a><br>Algorithm 2 是修改的過程，I 是 Input 而 I’ 是 output。state 是一個 bool，用來記錄 Affine Transformation 是否被使用過了。作者表示他們想在產生有意義的測資時，盡可能最大化修改的次數，也就是 TRY_NUM。如果 state 目前是 0，就隨機挑選一種修改方式，如果是 1，那就挑 Pixel Value Transformation，參數則是隨機。</p>        <h1 id="3-3-Power-Scheduling"   >          <a href="#3-3-Power-Scheduling" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-Power-Scheduling" class="headerlink" title="3.3 Power Scheduling"></a>3.3 Power Scheduling</h1>      <p>用mutation potential來計算可以修改的空間。公式是 B x 255 x size(I) - sum(abs(I-I’0)) mutation potential 越大，代表越接近種子，而且會被更優先修改。  </p>        <h1 id="3-4-Plugable-Coverage-Guided-Fuzzing"   >          <a href="#3-4-Plugable-Coverage-Guided-Fuzzing" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-Plugable-Coverage-Guided-Fuzzing" class="headerlink" title="3.4 Plugable Coverage-Guided Fuzzing"></a>3.4 Plugable Coverage-Guided Fuzzing</h1>      <p><a href="https://imgur.com/7QvOHVU.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/7QvOHVU.jpg" alt=""></a><br>DeepHunter 用了六種不同的 coverage criteria 去看哪一個 batch 要被留著。但是如果一直收 coverage，程式會不堪負荷，為了加速，會把一些得到差不多輸出的 seed 忽略掉，不必特別保留 coverage 的值。並用了 bucket 的機制來避免 trace exploitation issue，跟傳統 fuzzing framework 很像。 </p>        <h1 id="3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是"   >          <a href="#3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-Batch-Prioritization-調整每一個-Batch-被挑選到的機率，機率的公式是" class="headerlink" title="3.5 Batch Prioritization 調整每一個 Batch 被挑選到的機率，機率的公式是"></a>3.5 Batch Prioritization 調整每一個 Batch 被挑選到的機率，機率的公式是</h1>      <p><a href="https://imgur.com/RWrlq0O.jpg" target="_blank" rel="noopener"><img src="https://imgur.com/RWrlq0O.jpg" alt=""></a><br>避免總是有趣的 Batch 被挑選，其他 Batch 依然有 Pmin 作為最低機率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;論文資訊&quot;   &gt;
          &lt;a href=&quot;#論文資訊&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#論文資訊&quot; class=&quot;headerlink&quot; title=&quot;論文資訊&quot;&gt;&lt;/a&gt;論文資訊&lt;/h1&gt;
      &lt;ul&gt;
&lt;li&gt;標題：DeepHunter: Hunting Deep Neural Network Defects via Coverage-Guided Fuzzing &lt;/li&gt;
&lt;li&gt;作者：Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Hongxu Chen, Minhui Xue, Bo Li, Yang Liu, Jianjun Zhao, Jianxiong Yin, Simon See &lt;/li&gt;
&lt;li&gt;機構：Nanyang Technological University、Harbin Institute of Technology、Carnegie Mellon University、University of Illinois at Urbana–Champaign、Kyushu University、NVIDIA AI Technology Center &lt;/li&gt;
&lt;li&gt;會議/期刊：None 連結：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://arxiv.org/abs/1809.01266&quot;  target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1809.01266&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;
    
    </summary>
    
    
      <category term="論文筆記" scheme="https://bclin.tw/categories/%E8%AB%96%E6%96%87%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>溫暖幸福的愛情故事，三島由紀夫《潮騷》</title>
    <link href="https://bclin.tw/2019/03/13/shiosai/"/>
    <id>https://bclin.tw/2019/03/13/shiosai/</id>
    <published>2019-03-13T16:47:50.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>《潮騷》是三島由紀夫筆下少有的陽光、明亮、溫暖的作品，那一年，他 29 歲。</p><a id="more"></a><p>根據我查到的資料，三島曾說：「《潮騷》是以《塔夫尼斯與克蘿婀》為藍本，去尋覓被文明隔絕，卻瀰漫著淳樸美學的小島。」<br>《塔夫尼斯與克蘿婀》是古希臘晚期作家朗戈斯田園詩式的愛情小說，全書著墨刻劃主角戀愛中的歡樂和痛苦，甚且謳歌樸素和真摯的愛情；而《潮騷》則對應男主角新治的苦難生活和愛情歷程，挑動讀者的心弦。」</p><p>是的，在《潮騷》當中，你可以看到許多愛情作品的套路，深愛彼此的男女、家庭門第的不對等、父親的反對、第三者 … 等等，但在三島筆下，這樣的作品要比那些愛情小說多了些靈魂，三島描繪並歌頌了一個純樸的小島，島上有純樸的人民，過得艱苦但知足、快樂的生活。在與自然相處融洽的關係下生活著，在艱苦的環境下養成了刻苦的靈魂與堅實的肉體，這一向是三島喜愛的。作品本身則是非常淺顯易懂的，沒有多餘的隱諱暗示，或是任何過於陰暗的陳述。就是一個明亮溫暖的、揪心的愛情故事。</p><p>故事的背景是在日本三重縣鳥羽市的歌島，現在叫做神島，讀完《潮騷》，實在是很想去島上住個兩三天，度過與高度文明隔絕的樸實生活。我查了一下神島上的燈塔，想知道那是什麼地方，沒想到還真的有。（來源維基百科） </p><p><img src="https://imgur.com/TuQD5Ti.jpg" alt=""> </p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>眼下，她最明顯的成就，就是在東京接受大學教育，是個有教養的人。但是，人們常以貌取人，如此深思其貌不揚，也許同深思其貌標致是同樣過份的吧。</p></li><li><p>千代子一直相信自己認定自己醜陋的臉的校驗。這一執念一旦固化，就比漂亮的臉蛋更能巧妙地騙取感情。確信醜陋，就是處女所相信的石膏。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《潮騷》是三島由紀夫筆下少有的陽光、明亮、溫暖的作品，那一年，他 29 歲。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>無言的強烈窒息《那麼熱，那麼冷》</title>
    <link href="https://bclin.tw/2019/03/13/%E9%82%A3%E9%BA%BC%E5%86%B7%E9%82%A3%E9%BA%BC%E7%86%B1/"/>
    <id>https://bclin.tw/2019/03/13/那麼冷那麼熱/</id>
    <published>2019-03-13T14:54:50.000Z</published>
    <updated>2021-07-12T08:50:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>第一次看到王定國這個名字，是很久很久以前在友人的臉書貼文上，我已經忘記他說的是哪一本書，僅僅記得他對王定國讚譽有佳。</p><a id="more"></a><p>去年台北書展時我考慮了很久是否要買他的作品，最後卻作罷，今年同樣是書展，在印刻看到王定國立刻就買了，挑了一本《那麼熱，那麼冷》。說實話，倒也忘記為什麼是挑這本，而不是其他本，諸如《敵人的櫻花》、《誰在暗中眨眼睛》。現在回想起來，我感覺是有原因的，是一個堅定的理由，一種刻畫在血液裡的命運，但我現在是真的不知道為什麼。</p><p>原來是要先看《千年繁華》，但不知怎的還是把《那麼熱，那麼冷》塞進背包裡，在一個失眠的夜裡看到失眠，哭沒有眼淚的泣，搞不清楚是因為失眠而看書，或是因為看書而失眠。</p><p>這是一篇中短篇小說集，一共五篇，分別是《某某》、《落英》、《我的杜斯妥》、《那麼熱，那麼冷》、《世人皆蠢》。每一篇中都有一個男人訴說自己故事，和朋友、和家庭、和自己、和社會、和人生奮鬥的過程，他們都是那麼的努力，也都是萬般的無奈，無論看起來是光鮮亮麗或是平庸、甚至是悲慘，他們心裡或多或少有一些遺憾，像是一個疤痕刻畫在心上，一輩子無法痊癒，偶爾還會滲出血來。</p><p>王定國描繪出的氛圍是多麼冷靜與犀利，時時切中要害，讓讀者也跟著濡濕了眼眶，卻又難以哭出淚，就像是無聲的吶喊，被緊掐著脖子般難受，卻也無法發出聲音，梗在喉頭最後又吞了回去。我無法讀得很快，因為害怕自己會窒息。</p>        <h1 id="節錄"   >          <a href="#節錄" class="heading-link"><i class="fas fa-link"></i></a><a href="#節錄" class="headerlink" title="節錄"></a>節錄</h1>      <ul><li><p>「他慢慢體會到，也許這就夠了，每個人一生中都有一個戀人，即便永遠不再出現，但也永遠不會消失。」 - 《某某》</p></li><li><p>「一個人為了追求理念而竟陷入彷如自我毀滅的境界，這種精神多麼令我動容。」 - 《落英》</p></li><li><p>「過了這個彎就好。過了下個彎就會沒事的。人生道路總有幾個彎吧，我還不曾見過有人一路直走就能贏得眾多的喝采。」 - 《落英》</p></li><li><p>「我相信世上每個人都有一個傷心的所在，不論在心裡或在遠方。不幸我兩者都有。」 - 《我的杜斯妥》</p></li><li><p>「然而在那無言的當下，一個人倘若還能細膩倒選好舒服的臥姿倒下，那麼，他應該還有一些想法來度過各種困境吧。」 - 《那麼熱，那麼冷》</p></li><li><p>「要是人人精得像妖精，這個人生世界裡為什麼還有那麼多不堪的殘局。」 - 《世人皆蠢》</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次看到王定國這個名字，是很久很久以前在友人的臉書貼文上，我已經忘記他說的是哪一本書，僅僅記得他對王定國讚譽有佳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="讀書筆記" scheme="https://bclin.tw/categories/%E8%AE%80%E6%9B%B8%E7%AD%86%E8%A8%98/"/>
    
    
  </entry>
  
</feed>
